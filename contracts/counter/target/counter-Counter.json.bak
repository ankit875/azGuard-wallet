{"noir_version":"0.33.0+61d6f251ea67204af2d17175f120e17f2e9e9156","name":"Counter","functions":[{"name":"increment","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"outgoing_viewer","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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"},{"name":"claim_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"portal_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":""},{"name":"get_counter","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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"},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"claim_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"initialize","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"headstart","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"outgoing_viewer","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"7b3djuQ8dmZ9L++xD0Ry64e+lQ+NQdvjGTTQ6B64ez5gYMy9T1RlShFZERXMyNwSqYfrxH7LViio/SyluBcV0n/98d//49/+9//8b3/52//4+z/++Nf/77/++Ovf//3P//zL3/92+dd//RHGn/+3f/yvP//txz//8c8//+c///jX4V/++I+//ffL//6///LH//jLX//jj3+d7P/+y91mcc7z+5ZxCXnbOIThwdYW8/S+taW5tHUYYhrfN7/8ty3X7fP8aPtxSuvm4xK3rVN8uPN52zjEDxv/6V/+CBM1uavJTE3uarJQk7uaZGrya03iQE3uahKoyV1NIjW5q0lqtyZzvNZkmQo1icsS1rHkYfhWTey4mqSc15rYPDbMyUhN7moyUZO7mszU5K4mCzW5q0mmJr/WJA3t1qTWtTh9Zx6b8rRueTnem1HP6ee+4477/ta86lLktX4hXUsSUnpYwJC3cMYbXtP4cyR24EhuMMnhw0gebL0sa/BxmIYbph5iEsd1zJeB3G4dHmw95RXA5TabJTd2xo9k02w2E9k0m81MNqVsql2xF7JpNpuskU24ySaVsgnjuM2P5svsrLB1vXRsIJ2G0wnNphOu6czFdCxt6Yz5pk9clsbqHan3ofVOVep9aVl/7VjNvjWScVlHEm//+jwcSRzzluUcluK466UzUpO7mnyrQ4u2HWVcPh7lj31/q8NI2xUwplu79riC02aSwnS79WVUP0ayNDOS3MpIxm/NlNKy/a2ymAojsW1mP8bpbhyhkXHERsaRGhnHt64gyfJ1HPbrX4bx4V/iEK6X+WDh+TfksKr6PM3X/YeH3eJ1Mp2vf6Xi/GjbPMa1gnlcQuEvcd72nD/s+edBTj0c5PztgwyD3cwcc+EwPwng9W/fNM8317zwc9DLGQedTzjoaTjjoENx0GMsDXqZt41T+PAND/5aWtrmc3ZjdS/H+3M8sbHxpMbGY42NZ2xsPFNj45kbG8/S2HhyW+OZh8bGU/Pv8xjC3XhiY+M5/O/zuN09Ecdbmzc8ukSnPK7WwIYYCluPY1pHMo7LWNh63m7JyXbT/QyNefDZSKjxhEYSajyhiYQaT2juNqFLpcO1wx0/ZPSjMguV+U1lcr+VGaetMtPt3TKPz+vL4su69e16VArjw6O05XqU13HHh7flTuM67DRN12HHRw45pWHdc0rBbje+xLkMxKkUZyBOpTgjcSrF2W/ff9I4rx4nmc2/xmnEqRRnv0bhrHFO0xbnzSL5w41jnrefDuYlFzZO8/qjj5hy/BWUfsUGoPyysdl6hNGm+fnG83aD4rzY7eH9YKpjFQNTOzHVscSCqZ2YQv/B1MrUMm1jHvLXmco4SJjyZgoRClPrmJft2jfF8Eszl1GsgPIpUJC3gPIpUAxQAOUzoCCcAeV94zluwnme7PnG4XoHWMjDr3Y6Y6ehyp8q/DRUfYGqOGyExGFM32jokdkAWBVAzDcA1gQwDHhyCPwSgdN2gLdP/voCgVh1CKxLILpemMA0bE8dTEMs7Pn5TXphwNdDyvuYve5+CYMBFVB5Q8U6AFCtUDnd/xIGlgGAyh0qVgGAah3zs6XtS8qQAimfIgWvDimfIiXgvyHlc6TgqSHlC576+T0wISCfwWoHrDDVYPUFrPzuLAgGgRBYlUAcOATWJRBhDoFfItDr3paAXYfAugRi7aUJ3F4nl0L8Zs+KtYeUT5ESsfaQ4j1Zjwh+oHKHCr0PVO5QIfeByh0qAyqgcm7+IwoeqNyhwqqfDKpxe5t3GsfCz1ocH6ofIvYbUt43dvtpVURoA5U7VLhvoPKGKqHJgWqFyuv3eglNDlTuUKHJgWod89Of4STcN6R8jhSDFEj5FClYakj5HCmoZ0h539jx13oJTw1WO2CFqQarL2Dld1NJQmtDYFUCDQcOgXUJRJhD4JcI9LphyrDrEFiXQKy9MIGej9g3gxRIeRuz240whuAHKneoWAsAqhUqrxthjJUAoHKHinUAoFrH/HR92/D1kPIpUka8OqR8jhT8N6R8jhQ8NaR8wVMXboMZkc9gtQNWBlZg9TpWfncWjGhtCKxLIA4cAusSiDCHwC8R6HVvy4hdh8C6BGLtpQn0e3D6hLWHlM+RgrWHFO/J+oTgByp3qND7QOUOlQEVUHlDha8HKu/mf0LBA5U7VB1b9WuWYf6w76ahSsO655SC3XXzHTtqyTw7Nr6Kec4de1nJPDu2p+fM09I2zzKb7/LsWFxK5tmxMzxpni+8l8zzFVKzQQqkvG3s9uiAuWMRCFR7QdWxCASqvaBCBALVCpXX8yhmbCRQuUOFEgWqdcxPf2a+IFsh5XOkoHEh5XOkIIgh5XOkoJ4h5X1jx6dRLAZWYOWPFaYarL6Ald9N0wtaGwLrEogDh8C6BCLMIfBLBHr9IGDBrkNgVQIz1l6YQM9XSGWsPaS8j9ntRpiM4Acqd6hYCwCqFSqvG2GyARVQeUPFOgBQrWN+ur6d8fWQ8jlS8OqQ8jlS8N+Q8jlS8NSQ8gVP/fw2mDggn8FqB6ww1WD1Bazc7iyIA1obAusSiAOHwLoEGgRC4FcIdLq35cIvBEJgVQKx9tIEur0YKA5Ye0j5HClYe0hxn6wj+IHKG6qA3gcqd6iQ+0DlDhW+Hqi8m/+Aggcqd6gMqM4F1SvvJXN8xH4M2G9Ied/Y66dVMSC0gcodKtw3ULlDhSYHqhUqp9/rxYAmBypvqCKaHKjWMT/7GU6MuG9I+RwpCG1I+RwpWGpI+RwpBimQ8rax46/1Ip4arHbAClMNVl/Ayu+mkojWhsC6BOLAIbAugQhzCPwSgV43TCXsOgTWJRBrL0yg4yP2Y8LaQ8r7mN1uhEkIfqByh8qACqjeofK6ESaxEgBU7lCxDgBU65ifrm8nfD2kfI4UvDqkfI4U/DekfIoUw1NDyhc8deE2GEM+g9UOWGGqweoLWPndWWBobQisS6BBIARWJRBhDoFfItDr3hbDrkNgXQKx9tIE+j043bD2kPI5UrD2kOI9WR8R/EDlDhV6H6jcoULuA5U7VPh6oPJu/kcDKqDyhqpjqz7btEH1YSThrTQd695SaTr2kKXSdCze5u0Hn2HOy31pOjZNhdJMHfuSUmk67voXW0cSlvlBaTruXUul6bgDW+JyLU2+L41Rmt+VpuPZcJ7iVX48OKE6ng2XStPxbLhUmo5nw6XS9DsbjpedryOx4WNp7re2TYyMw42/yI+2zXkzP8PNjn9s/KPmc7/T7Ho173f+Xq/m/TYG+9U8XG8QDEN8UPR+W46KRTeKfnzR+22T9vyTfq357eLzWvN++69jaj4/4Lzfxu61mo/j2upMtpRqPo3r3CXPN7ejhjw/OsZlHYbF6aZ6jzad81q8tIT4fOMwTlv041LaeJi3jS+Ly7cb/8Sk3yb3hJhYjNO2rQ3PN47Xe6djHobvYULDDyZlTBYcxbGY/Cx6z5Ji3jyl2VAo+pzWYc/Tzbb58V1b2+9ObidXbzceLT0rijoV79lP1Km4UfGDK96zmahT8Z69RJ2K92wl6lS85wa/TsV77pWrVDz33HbWqTg959EVp+c8uuL0nEdX3Kj4wRWn5zy64vScR1ecnvPoitNzHl1xes5jK54Ges6jK07PeXTF6TmPrjg959EVNyp+cMXpOY+uOD3n0RWn5zy64vScR1ecnvPgigd6zqMrTs95dMXpOY+uOD3n0RU3Kn5wxek5j644PefRFafnPLri9JxHV5ye8+CKR3rOoytOz3l0xek5j644PefRFTcqfnDF6TmPrjg959EVp+c8uuL0nEdXnJ7z4Iones6jK07PeXTF6TmPrjg959EVNyp+cMXpOY+uOD3n0RWn5zy64vScR1ecnvPgihs959EVp+c8uuL0nJ+r+LK9dnyZ04eK/ywjjaRLGY0yfqqMeVorkrMVzn+btld82zTfjOPhM+XlnkCfjAYYqNyhoscHKneo0BhA5Q4Vpgao3KFCRgGVN1Qjvg2o3KFCKQKVO1RYU6ByhwqHDFTuUBlQAZU3VBh1oHKHCqMOVO5QYdSByh0qjDpQuUOFUQcqb6gmjDpQuUOFUQcqd6gw6kDlDhVGHajcoTKgAipvqDDqQOUOFUYdqP7TGyqMOlC5Q4VRByp3qDDqQOUN1YxRByp3qDDqQOUOFUYdqNyhwqgDlTtUBlRA5Q0VRh2o3KHCqAOVO1QYdaByhwqjDlTuUGHUgcobqgWjDlTuUGHUgcodKow6ULlDhVEHKneoDKiAyhsqjDpQuUOFUQcqd6gw6kDlDhVGHajcocKoA5U3VBmjDlTuUGHUgcodKow6ULlDhVEHKneoDKiAyhsqjDpQuUOFUQcqd6gw6kDlDhVGHajcocKoA5UzVDZg1IHKHSqMOlC5Q4VRByp3qDDqQOUOlQEVUHlDhVEHKneoMOpA5Q4VRh2o3KHCqAOVO1QYdaDyhipg1IHKHSqMOlC5Q4VRByp3qDDqQOUOlQEVUHlDhVEHKneoMOpA5Q4VRh2o3KHCqAOVO1QYdaDyhipi1IHKHSqMOlC5Q4VRByp3qDDqQOUOlQEVUHlDhVEHKneoMOpA5Q4VRh2o3KHCqAOVO1QYdaDyhiph1IHKHSqMOlC5Q4VRByp3qDDqQOUOlQEVUHlDhVEHKneoMOpA5Q4VRh2o3KHCqAOVO1QYdaDyhsow6kDlDhVGHajcocKoA5U7VBh1oHKHyoAKqLyhwqgDlTtUGHWgcocKow5U7lBh1IHKHSqMOlB5QzVi1IHKHSqMOlC5Q4VRByp3qDDqQOUOlQEVUHlDhVEHKneoMOpA5Q4VRh2o3KHCqAOVO1QYdaDyhmrCqAOVO1QYdaByhwqjDlTuUGHUgcodKgMqoPKGCqMOVO5QYdSByh0qjDpQuUOFUQcqd6gw6kDlDdWMUQcqd6gw6kDlDhVGHajcocKoA5U7VAZUQOUNFUYdqNyhwqgDlTtUGHWgcocKow5U7lBh1IHKG6oFow5U7lBh1IHKHSqMOlC5Q4VRByp3qAyogMobKow6ULlDhVEHKneoMOpA5Q4VRh2o3KHCqAOVN1QZow5U7lBh1IHKHSqMOlC5Q4VRByp3qAyogMobKow6ULlDhVEHKneoMOpA5Q4VRh2o3KHCqAOVM1TjgFEHKneoMOpA5Q4VRh2o3KHCqAOVO1QGVEDlDRVGHajcocKoA5U7VBh1oHKHCqMOVO5QYdSByhuqgFEHKneoMOpA5Q4VRh2o3KHCqAOVO1QGVEDlDRVGHajcocKoA5U7VBh1oHKHCqMOVO5QYdSByhuqiFEHKneoMOpA5Q4VRh2o3KHCqAOVO1QGVEDlDRVGHajcocKoA5U7VBh1oHKHCqMOVO5QYdSByhuqhFEHKneoMOpA5Q4VRh2o3KHCqAOVO1QGVEDlDRVGHajcocKoA5U7VBh1oHKHCqMOVO5QYdSByhsqw6gDlTtUGHWgcocKow5U7lBh1IHKHSoDKqDyhgqjDlTuUGHUgcodqp6Neph+B9XP0rTthW3YBmLDzUB+bP1z+G0byNLwx7ZdV3H4bVuV4vDb7t9tyPP25zLm++G33SkWh2/nHn7bs9/i8NueZxWH3/YV/TK9ydvwl9IVPaa07TuN6Wbr+eG44zpNvPzntTQpPNo6DtdxD+NU2veyjSQsNwWMb/OosfHJgmjVG5/jaFZ9anxqdtqqj1tNlpujXKve+IxStOqNT4RFq974/P20VR+Ga9XDXdWNqn+y6vMm4EIYvnk1bbxbEq16402eaNXpTfep+vOrKb1pjarTm1ao+kxvuk/Vn84cZ3rTT8/X52vV44d9/ywk7aZTIekgP1nIEMetkJN9b343G1WvUHU6yBpVp4Pcp+rP53d0kDWqTgdZo+p0kPtU/Wkvs9BBfmEKPk13U/CFptCpkDSFn/07MG/7vlTye/O7hQ6yRtWNqleoOh3kPlV/Or9b6CBrVJ0OskbV6SD3qfrzXoYO8vUpeAzL3RQ80xQ6FZKm0KmQNIVOhdTq8/K2b8tDuZBpvFbSborz8AfNYZy23xJfrMTNcT7c+dMfHmej7DXKrtXpnabsWq3eacqu1eudpuxazd5pyq7V7Z2k7NOg1RuepuxaneRpyq7Vd56m7HSpVcpulL1G2elSq5SdLrVK2elSq5S96y51vlHoy1Qou+MTJ6eh6y61WtlDL13qz4NtvTfclrssBfuw9c/ht95jFYbfeq9SGL6de/itz50Lw298Djpt8xWb5lzYelzWx0VPdrOqfZnm/DzUxud9Lx3qPK5XtnnK94fa+FzL81Abn984HmpsfE7heaiNzyg8D7Xx2YfnoTY+U/E8VOvnUBufAXkeqtJsqXCoSrOlZVw3XuZ4f6hKs6XCoSrNlp4falKaLRUOVWm2VDhUpdlS4VCVZkuFQ7V+DlVptlQ4VKXZUuFQlWZLeVzeN863r2hbD1VptlQ4VKXZ0vNDbfxd966HqjRbKhyq0mypcKhKs6XCoVo/h6o0WyocqtJsqXCoSrOlMGzvvw3DvNwfrNJ8qXiwSjOm0sG2/s5U34NVmjUVD1Zp3lQ8WKWZU/FgraeDVZo9FQ9Waf5UPNjGZ1Czbe+Rn+epsPVZ3sQ5tf7WWdGqNz6n1Kx662+dPW3Vnz23b2r9rbOiVW98ui9a9cb7jtNW/dkzKqfW3zrbUNX93sQ5tf7WWdGqN94Silad3nSfqj+/mtKb1qg6vWmFqrf+1tnTVv3pzLH1t862NF9/9rLUqfW3zp6nkHSQnyyk45s4p9bfOitadTrIGlWng9yn6s/nd3SQNapOB1mj6nSQ+1T9aS/T+ltn25yC378sdWr9rbPnKSRN4Wf/Dvi9iXNq/a2zolU3ql6h6nSQ+1T96fyu9bfOiladDrJG1ekg96n6816GDvL1KfiDV1NOrb919jyFpCl0KqRWU3iWVxW0/o5a1bIbZa9Rdq2+8DRl12oMT1N2rc7wNGXXag1PU3at3vAkZZ9bf0etatm1+s7TlJ0utUrZ6VKrlN0oe42yd92l1nqP4dz6O2pVy95Ll/rzYFvvDWPYDjaXDjbYddhjvi4AhGVpjbHWe0PNsrf+ZtjLevJa9sU+lv3n8Ft/DmRh+K0/2bEw/Mbn/ENe923xZvVzG76de/iNz0FLw298LlcafuNzotLwG5/llIbf+GyhMHyPd6eGaX2o+eWyHl2Hn/K4TaiHGApbj9fbx8Zopa3DuB1jvnbscX60bR6321fyePte+IfTorztOX/Y81vFg1LFx7TiNY7LWNh63vqdfPse6iE0NhX1ePUsEe0bUeo2okupw3aQNn4I6WdpjNL8rjRjv6UZp600UxxKp3aMth1lujlVw/jwKG25HuXNjdiPCpim7V75NE3XYcf0aOM0rHtOKdjtxj/znMhTKs+ZPKXyXMhTKs9MnufK09I66mQ2/5pnkur+yTP16xbOmuc0bXneeKWHG8c8b7+KyksubJzm7bEwKcc7UvpVHJDyy8Zm6xFGm+bnG8/bCyznxW4P7ydUHUsZoNoLKgMqoPKGChEIVCtUy7SNecjfgQobCVTuUKFEgWod87Jd/qYY7lo6ZCukfI4UNC6kfIoUQxBDyudIQT1DyvvG8/WJ5PNkzzcO15vCQh7uPLXhqcFqB6ww1WD1BazisBESh5uHHr7e15tBIARWJRAHDoF1CUSYQ+CXCNxCj0MO3yEQuw6BdQnE2gsTmIawli8NsbDnwi17hrWHlPcxu90IMyL4gcodKtYCgGqFyutGmJGVAKByh4p1AKBax/x0fXs0SIGUT5GCV4eUz5GC/4aUz5GCp4aUL3jqwm0wI/IZrHbAClMNVl/Ayu/OggmtDYF1CcSBQ2BdAhHmEPglAr3ubZmw6xBYl0CDQGUC8/Y0vBC/17NOWHtI+RwpWHtIcZ+sI/iByh0q9D5QuUOF3Acqb6hmfD1QeTf/MwoeqNyhwqqfDKrR1pfUpXEs/KzF8xH7M/YbUt43dvtp1WxABVTeUOG+gcodKjQ5UK1Qef1eb0aTA5U7VGhyoFrH/PRnODPuG1I+RcqC0IaUz5GCpYaUz5GCeoaU940df6234KnBagesDKzA6nWs/G4qWdDaEFiXQBw4BNYlEGEOgV8i0OuGqQW7DoF1CcTaCxPo+Yj9jLWHlPcxu90IkxH8QOUOFWsBQLVC5XUjTGYlAKjcoTKgAqr3MT9d3874ekj5HCl4dUj5HCn4b0j5HCl4akj5gqcu3AaTkc9g5Y7VMmCqweoLWLndWbAMaG0IrEsgDhwC6xKIMIfALxHodG/LMhgEQmBVArH20gS6PTh9GbD2kPI5UrD2kOI+WUfwA5U7VOh9oPKGKiD3gcodKnw9UHk3/wEFD1TuUHVs1a9ZhvnDvpuGKg3rnlMK9ms3H4w8pfLs2PhK5tmxl5XMs2N7es48LW3zLLP5Ls+OxaVknh07w5Pm+cJ7yRxfIbXEjkUgpHzc2OvRAUvsWAQC1V5QdSwCgWovqBCBQLVC5fQ8iiUaUAGVN1QoUaBax/zsZ+ZLRLZCyudIQeNCyudIQRBDyudIQT1DyvvGjk+jSHhqsNoBK0w1WH0BK7+bphNaGwLrEogDh8C6BBoEQuBXCPT6QUDCrkNgXQKx9sIEOr5CaklYe0h5H7PbjTAJwQ9U7lCxFgBUK1ReN8IYKwFA5Q4V6wBAtY756fq24esh5XOk4NUh5XOkGKRAyqdIwVNDyhc8deE2GEM+g9UOWGGqweoLWPndWWBobQisSyAOHAKrEjgizCHwSwR63dsyYtchsC6BWHtpAv1eDDRi7SHlc6QYpECK92QdwQ9U7lCh94HKHSrkPlC5Q4WvByr35h8FD1TeUE1Y9ZNB9cp7yTwfsT9hvyHlfWO3n1ZNCG2gcocK9w1U7lAZUAHVO1Rev9eb0ORA5Q4Vmhyo1jE//RnOhPuGlM+RgtCGlM+RgqWGlE+RMqOeIeV9Y8df6814arDaAStMNVh9ASu/m0pmtDYE1iXQIBACqxKIMIfALxHodcPUjF2HwLoEYu2FCfR8xP6MtYeU9zG73QgzI/iByhuqhbUAoFqh8roRZmElAKjcoWIdAKjWMT9d317w9ZDyOVIMUiDlU6TgvyHlc6TgqSHlC566cBvMgnwGqx2wwlSD1Rew8ruzYEFrQ2BVAjMOHALrEogwh8AvEeh1b0vGrkNgXQKx9tIE+j04PRukQMqnSMHaQ4r7ZB3BD1TuUKH3gcodKuQ+ULlDha8HKufmPw8oeKByh6pjqz7btEH1YSThrTQd695SaTr2kKXSWMel2X7wGea83JemY9NUKk3HvqRUmo67/sXWkYRlflCajnvXUmk67sCWuFxLk+9KEzruI0ql6Xg2nKd4lR/3J1ToeDZcKk3Hs+FSaYzS/K40/c6G42Xn60hs+Fia+61tEyPjcOMv8qNtc97Mz3Cz4x8b/6x5v9PsejXvd/5er+b9Ngb71TxcbxAMQ3xQ9H5bjnpFj/02MxWL3m+btOef9GvNbxef15r3238dU/P5Aef9Nnav1Xwc11ZnsqVU82lc5y55vrkdNeT50TEu6zAsTjfVe7TpnNfipSXE5xuHcdqiH5fSxsO8bRw+hPiGiYHJeTCxGKdtWxuebxyv907HPAzfw4SGH0w+gQmO4lhMfha9Z0kxb57SbCgUfU7rsOfpZtv8+K6t7Xcnt5OrtxuPYs+Kok7Fe/YTVSqeepYTdSres5moU/GevUSdivdsJepU3Kj4wRXvuVeuU/Ge2846FafnPLri9JxHV5ye8+CKGz3n0RWn5zy64vScR1ecnvPoihsVP7ji9JxHV5ye8+iK03MeXXF6zqMrTs95cMVHes6jK07PeXTF6TmPrjg959EVNyp+cMXpOY+uOD3n0RWn5zy64vScR1ecnvPgik/0nEdXnJ7z6IrTcx5dcXrOoytuVPzgitNzHl1xes6jK07PeXTF6TmPrjg958EVn+k5j644PefRFafnPLri9JxHV9yo+MEVp+c8uuL0nEdXnJ7z6IrTcx5dcXrOgyu+0HMeXXF6zqMrTs95dMXpOY+uuFHxgytOz3l0xek5j644PefRFafn/FzFl+2148ucPlT8ZxlpJD3KmOkOP1fGPK0VydkK579N2yu+bZpvxvHwmfJ6T6DPNMBA5Q4VPT5QuUOFxgAqd6gMqIDKGypkFFC5Q4VvAyp3qFCKQOUOFdYUqNyhwiEDlTNUYRhQ6lDlTxVOHar8qUKqQ5U/VVh1qPKnyqAKqtypwqtDlT9ViHWo8qcKsw5V/lSh1qHKnyrcOlS5UxVw61DlTxVuHar8qcKtQ5U/Vbh1qPKnyqAKqtypwq1DlT9VuHWo8qcKtw5V/lTh1qHKnyrcOlS5UxVx61DlTxVuHar8qcKtQ5U/Vbh1qPKnyqAKqtypwq1DlT9VuHWo8qcKtw5V/lTh1qHKnyrcOlS5U5Vw61DlTxVuHar8qcKtQ5U/Vbh1qPKnyqAKqtypwq1DlT9VuHWo8qcKtw5V/lTh1qHKnyrcOlS5U2W4dajypwq3DlX+VOHWocqfKtw6VPlTZVAFVe5U4dahyp8q3DpU+VOFW4cqf6pw61DlTxVuHarcqRpx61DlTxVuHar8qcKtQ5U/Vbh1qPKnyqAKqtypwq1DlT9VuHWo8qcKtw5V/lTh1qHKnyrcOlS5UzXh1qHKnyrcOlT5U4Vbhyp/qnDrUOVPlUEVVLlThVuHKn+qcOtQ5U8Vbh2q/KnCrUOVP1W4dahyp2rGrUOVP1W4dajypwq3DlX+VOHWocqfKoMqqHKnCrcOVf5U4dahyp8q3DpU+VOFW4cqf6pw61DlTtWCW4cqf6pw61DlTxVuHar8qcKtQ5U/VQZVUOVOFW4dqvypwq1DlT9VuHWo8qcKtw5V/lTh1qHKnaqMW4cqf6pw61DlTxVuHar8qcKtQ5U/VQZVUOVOFW4dqvypwq1DlT9VuHWo8qcKtw5V/lTh1qHKm6ow4Nahyp8q3DpU+VOFW4cqf6pw61DlT5VBFVS5U4Vbhyp/qnDrUOVPFW4dqvypwq1DlT9VuHWocqcq4Nahyp8q3DpU+VOFW4cqf6pw61DlT5VBFVS5U4Vbhyp/qnDrUOVPFW4dqvypwq1DlT9VuHWocqcq4tahyp8q3DpU+VOFW4cqf6pw61DlT5VBFVS5U4Vbhyp/qnDrUOVPFW4dqvypwq1DlT9VuHWocqcq4dahyp8q3DpU+VOFW4cqf6pw61DlT5VBFVS5U4Vbhyp/qnDrUOVPFW4dqvypwq1DlT9VuHWocqfKcOtQ5U8Vbh2q/KnCrUOVP1W4dajyp8qgCqrcqcKtQ5U/Vbh1qPKnCrcOVf5U4dahyp8q3DpUuVM14tahyp8q3DpU+VOFW4cqf6pw61DlT5VBFVS5U4Vbhyp/qnDrUOVPFW4dqvypwq1DlT9VuHWocqdqwq1DlT9VuHWo8qcKtw5V/lTh1qHKnyqDKqhypwq3DlX+VOHWocqfKtw6VPlThVuHKn+qcOtQ5U7VjFuHKn+qcOtQ5U8Vbh2q/KnCrUOVP1UGVVDlThVuHar8qcKtQ5U/Vbh1qPKnCrcOVf5U4dahyp2qBbcOVf5U4dahyp8q3DpU+VOFW4cqf6oMqqDKnSrcOlT5U4Vbhyp/qnDrUOVPFW4dqvypwq1DlTtVGbcOVf5U4dahyp+qnt16mH5H1Vtt2jbENmwDseFmID+2fhu/nXz8bVuv8vjb9ivl8bfdyduQ5+2PZswPxt92z1gef9vdSWn8cWh7Hlwef9szrvL42762X2Y6eRv/Urq2x5S2facx3Ww9P5z2xHXGePnPa21SeLT1Jelt38M4lfa9bCO5LMxcaxLje9kbnzaolt0oe42yNz5JO23Zx3kr+81RbmVvfG6pWvbGp8SqZW98Jn/asg/DtezhvuyNNyANlX3elFwIwzcvqaHxvkm17I23e6plp0vdp+zPL6mBLrVK2Y2y1yg7Xeo+ZX8+gQx0qZ+et8/XsscP+36rJI2nVyXpJT9ZyRDHrZKTfXeaRy9Zo+yRXrJK2ekl9yn782lepJesUnZ6ySplN8q+S9mfNzWRXvILU/Fpup+KR9pDr0rSHn72T8G87ftSyu9O8+glq5SdXrJG2RO95D5lfz7NS/SSVcpOL1ml7PSS+5T9eVOTjLK/PBW/rCXcT8UT7aFXJWkPvSpJe+hVSa2OL2/7tjyUK5nGayntpjoPf/8cxmn76fG4fPjp8aOdP/2d8mWk1L1G3U2r5ztP3bWavvPUXavrO0/dtdq+89TdqHuVumt1ieepu1ZPeZ66a3Wg56k7/WqdutOvVqn7SL9ap+5d96vzjWJcpkLdPZ/fF8eu+9WKde+lX307Wmv8aLcVAUvBPmz9Nv7Wu63S+FvvWkrjb332Xxp/67Po0vgbn41O28TFpjkXth6X9SG8k92s/l3mOz+PdWp8BvjSsc7jeoWbp/zgWBufdbkea+MzHddjbXx24Xqs1tGxNj4PcT3Wxucsrsfa+PzG9Vgbnwu5HqvSvKlwrLPSvGkZ142XOT44VqV5U+lYleZNpWNVmjeVjtU6OlaleVPpWJXmTaVjVZo3lY5Vad5UOlaleVPhWBeleVMe14Hk27dhbceqNG8qHavSvKl0rErzptKxWkfHqjRvKh2r0rypdKxK86bSsSrNm0rHqjRvKhxr42/Jfe1Yw7C9dDQM8/LgaJVmTuWjVZo7lY9WafZUPlrr6miVZlDlo1WaQ5WPVmkWVT5apXlU+WiVZlKlo02tv2l1tu0t3vM8FbY+zbsPU+sviFUte+OzS9WyNz7NPW3Znz4QLQ1G2WuUvfGJv2rZG+9ATlv2p4//S62/17ahsju++zC1/l5b1bI33hyKlr3199qetuzPL6mtv9dWtex0qVXKTpe6T9mfTyBbf69tS/P2p++nTK2/qvZElaSX/GQlPd99mFp/Va1q2eklq5SdXnKfsj+f5rX+XlvVstNLVik7veQ+ZX/e1LT+Xts2p+IP3k+ZWn9V7YkqSXv42T8Fju8+TK2/qla17PSSVcpOL7lP2QvTPHrJGmVv/b22qmWnl9yn7M+bmtbfa9vkVPzRuwBT66+qPVEljUo6VVKrPTzL+w9S6++qla27VoN4nrprdYjnqbtWi3iaurf+HlzZums1ieepu1aXeJ66a/WU56m7UfcqdadfrVN3+tU6dadfrVP3rvvVau9JTK2/B1e17q2/B9et7m9H23qXGMN2tLl0tMGuwx7zdUUgLEtzlLXeJarWvfUnTi7r1rbYx7q/jd9OPv7WnwpZGn/js/8hr6ucFm/WRK/jb3wWXRx/47PR4vgbn9WVxu/xjtgUt1soL7OtwviXbQKTQ+lXCWnZpkbh+tzsn2/xvts2T+P6Mtw8D7FwDUrL9tDJOD2/Al3qNm3bWuFy5Xpt83inLdnslE0km2azSWTTbDZGNs1mM5JNs9lMZNNsNg49WNzm6eH2TtnH2YR53nY9L7dbp/cROXRVNm4HfemiSyOabK1nmPL1VvsQHxmjZQNxGa89yfIwKBu2nPKHA33U7IRNcg3jFdr47kY93mF9wqpcDnA7O28E81oVj7ddt1GVZHFznEOhKmG4/tEKg5WX4ELcTtCwhPsqBqr4mSrmbdBxuD9DPd7QTRU93v1NFT3eKt5BFeOQH8nLrYojVXSo4kQVHao4U8VPVDGlbTU33fRRWxVleotxWPc75qlQxRS2QaSwzNeqvPeAs0xv8VJV4rT25yk+qMoi01u4VkWmV3Ctiszc37UqMnN516oYVXlQFZm5tmtVZObOrlWRmQu7VqXPuW2pKjJz2ymsQ57Min1TmK5t04eqPJDstjVNZjdvsV1LmGUmwvVKKDNrrldCmSl2vRK2PR/PZtuh3vzdX9bR21lG//N21l9H3/b89se9AdtAbqh8fH2ebIV9nG6fbjw/Qjim6yLu5b8tftj+rThtT3MrF8d5tntzuI+Lk7YfbF7Wka4H+3h9fpuq2YcHtY+P6hiHcbtxZbj5KejjrdM4bOMYbx6S9vCeguut4vGy2P1hz29FXCji94uYKeJ3i2jDIFPEy5Rl+9OVSkUMNz+0u23UuCvv/q48GwKQAEkJkggkQFKCJAEJkJQgMSABkhIkI5AASQmSCUiApASJjtGKedkgiSVI8rw9/iDPaSmowZxvbn0chrmwee9M6Qi+w5iK97bZBh3HV7WOQUfz1a2jjgmrW0cdWbRjHX/83mD7qeRgaSxsP03rrO/yNddtU34vuo58OVHRjaJ/pujz9jq6y3/n0kJ159PLoCM/DoNqCeHBdUhHEFQuJE20UyHpHD9VyLw9oOTy3+P4oJC0jj6FjPSOToWkeXQqJN2jUyHpCJ0KaRTSp5B0Nk6FpLNxKiSdjVMh6WycCkln41PIRGfjVEg6G6dC0tk4FZLOxqmQRiF9Ckln41RIOhunQtLZOBWSzsapkHQ2PoU0OhunQtLZOBWSzsapkHQ2ToU0CulTSDobp0LS2TgVks7GqZB0Nk6FpLPxKeRIZ+NUSDobp0LS2TgVks7GqZBGIX0KSWfjVEg6G6dC0tk4FZLOxqmQdDY+hZzobJwKSWfjVEg6G6dC0tk4FdIopE8h6WycCkln41RIOhunQtLZOBWSzsankDOdjVMh6WycCkln41RIOhunQhqF9CkknY1TIelsnApJZ+NUSDobp0LS2fgUcqGzcSoknY1TIelsnApJZ+NUSKOQPoWks3EqJJ2NUyHpbJwKSWfjVEg6G59CZjobp0LS2TgVks7GqZB0Nk6FNArpU0g6G6dC0tk4FZLOxqmQdDZOhaSzcSnkONDZOBWSzsapkDqdzWV/ayHHOBS2DvH6NjS7LeTjfS/j+rrFuCw3ZZzig63Hwdatx2HMH7Z+K7pOF9RQ0bfqjcM0FLa2YTsxbBivRxnn94SMhCondCn2dpTzdJ+QTt/WUELbvscwWGHrdH2tbMohXRN6uHGwbeOwzLcbv8Wp0z12EWec1ncVp/goTp0eljgvcep00sR5iVOnnyfOcPk64lSKU8dtEOclTgyLVJy4G6k4jTiV4sQKfSbOnNc40xBDycTlddhjmm62fVSO0dZ4xuVmzIN9QQkFlJBOlvggnSyRQTpZYoJksoxoIJ0scUA6WSKAzpNlob+M2B+dLI0sZbLE++hkiffRyRLvo5Ml3kcnS7yPTJYJ76OTJd6napbTsO54SmMhy2Vat72sYN/sd3qPEu1zmijzuB5gnocPUT7YdrtdIeebE/hhfmk7uIsjtNuN3xDBJoFIAREDERB5jgjuC0QKiKDUQKSACKYORAqIIABBpIAIXhFEniNi6EoQKSCCBQWRAiLYVRApIIJdBZECIgYiIPIcEewqiBQQwa6CSAER7CqIFBDBroJIARHsKog8R2TEroJIARHsKogUEMGugkgBEewqiBQQMRABkeeIYFdBpIAIdhVECohgV0GkgAh2FUQKiGBXQeQ5IhN2FUQKiGBXQaSACHYVRAqIYFdBpICIgQiIPEcEuwoiBUSwqyBSQAS7CiIFRLCrIFJABLsKIs8RmbGrIFJABLsKIgVEsKsgUkAEuwoiBUQMREDkOSLYVRApIIJdBZECIthVECkggl0FkQIi2FUQeY7Igl0FkQIi2FUQKSCCXT0NIsHitdC2FCCJoy1bPebwHJM0jfN6gNN0HUh8lEtKw7rnlG6ZSu9MoWNhypspgymYcmYK4QtT3kxhiGHqVaYsrQeYzOZ7plDKMOXNFA4apl5mantDdrKbV2Q/3Djmed1zzEsubGy2ZWjT/HzjeVyPb14eCA3MOWArgp3x/YDdENjLtI15yN8Cm1UKwJYEm7UVwG4H7DmO68bzZIWNhw3SOIzpW2cBq0GcBZwFxlnAWXDSs2DaDnDI4VtnAStunAWcBawRchbseRakIaRr6Qp7vmS4nQUpx9uN32hl9RFa26HVUaizBArYkmCzBArYgmBPA0uggN0Q2F4rRdPAEihgS4LNEihgtwP2uGwZTjH8qjqmgaVKaD0PrQat0HoaWln6g9bz0MoSHbS2Q+srC9Vh2Z4OEvIQ79FmPQ+0RdFmRQ+0z4m2362m08DyH2dB92dBYK2Qs4CzgIVFzoKzngVeN1xPgVVIzgLOAlY3OQv2PQu2aqQQv+lygkErtJ6GVlY3obUZWj0bSBZCAVsSbJZBAVsSbBZBAbshsP38BeuagK0IdmSpErBfBXu0uG48joVf1b72VJznzwOZIkuK0NoOrX6/Lo+sEgK2JNgs/AG2JNgG2IDdDthuj02ILCcCtiTYLCcCdjtgF34FHFkjhNbz0MrCH7Seh1ZW86D1NLQmluigtR1aPR+akFjPA21RtFnRA+1zou14Q2hi+Y+zgLPAOAs4C7o/C1hY5Cw461ngdsN1YhWSs4CzgNVNzoI9z4JarwlLLIQCtiTYrJkCdkNgu90WaCyvArYk2CyuAnY7YFeyjsY6LGcBZwHrsJwFZz0L3KyjGWcBZ0H3ZwHrsJwF+54Fjk83NtZLofU8tLKuCa3N0OrZQLKuCdiSYLOuCdiKYI+sawJ2Q2C7+YuRdU3AlgSbpcrzgD3nlb6whPQB7LcwWXETCtMIUydM1j+EwmR54JxhDtODMLHnQmFijIXCxJLqhDlhBoXCxIYJhYkBEgoTAyQUphGmTpgYIKEwMUBCYWKAhMLEAAmFiQHSCXPGAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQACYWJARIKEwOkE+aCARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yMARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJsx5wAAJhYkBEgoTAyQUJgZIKEwjTJ0wMUBCYWKAhMLEAAmFiQESChMDpBNmwAAJhYkBEgoTAyQUJgZIKEwjTJ0wMUBCYWKAhMLEAAmFiQESChMDpBNmxADJvAx1jhggoTAxQEJhYoCEwjTC1AkTAyQUJgZIKEwM0HnCtHgttC0PwsQACYWJAdIJM2GAhMLEAAmFiQESChMDJBSmEaZOmBggoTAxQEJhYoCEwsQACYWJAdIJ0zBAQmFigITCxAAJhYkBEgrTCFMnTAyQUJgYIKEwMUBCYWKAhMLEAOmEOWKAhMLEAAmFiQESChMDJBSmEaZOmBggoTAxQEJhYoCEwsQACYWJAdIJc8IACYWJARIKEwMkFCYGSChMI0ydMDFAQmFigITCxAAJhYkBEgoTA6QT5owBEgoTAyQUJgZIKEwMkFCYRpg6YWKAhMLEAAmFiQESChMDJBQmBkgnzAUDJBQmBkgoTAyQUJgYIKEwjTB1wsQACYWJARIKEwMkFCYGSChMDJBOmBkDJBQmBkgoTAyQUJgYIKEwjTB1wsQACYWJARIKEwMkFCYGSChMDJBMmMuAARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yAARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yIARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yEARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ0zDAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQACYWJARIKEwOkE+aIARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8wJAyQUJgZIKEwMkFCYGCChMI0wdcLEAAmFiQESChMDJBQmBkgoTAyQTpgzBkgoTAyQUJgYIKEwMUBCYRph6oSJARIKEwMkFCYGSChMDJBQmBggnTAXDJBQmBggoTAxQEJhYoCEwjTC1AkTAyQUJgZIKEwMkFCYGCChMDFAOmFmDJBQmBggoTAxQEJhYoCEwjTC1AkTAyQUJgZIKEwMkFCYGCChMDFAMmHmAQMkFCYGSChMDJBQmBggoTCNMHXCxAAJhYkBEgoTAyQUJgZIKEwMkE6YAQMkFCYGSChMDJBQmBggoTCNMHXCxAAJhYkBEgoTAyQUJgZIKEwMkE6YEQMkFCYGSChMDJBQmBggoTCNMHXCxAAJhYkBEgoTAyQUJgZIKEwMkE6YCQMkFCYGSChMDJBQmBggoTCNMHXCxAAJhYkBEgoTAyQUJgZIKEwMkE6YhgESChMDJBQmBkgoTAyQUJhGmDXDXPJajvxLmG/x4HSajgdL4x7PbOvG8xIK8eRlPcSc523b+LDOaRtEsGC3G79FiaORiRJDIxMlfkYlyhE7IxMlbkYmSsyMTJR4GZkojShVosTgyESJ7ZGJEtsjEyW2RyZKbI9KlBO2RyZKbI9MlNgemSixPTJRGlGqRIntkYkS2yMTJbZHJkpsj0yU2B6VKGdsj0yU2B6ZKLE9MlFie2SiNKJUiRLbIxMltkcmSmyPTJTYHpkosT0qUS7YHpkosT0yUWJ7ZKLE9shEaUSpEiW2RyZKbI9MlNgemSixPTJRYntUoszYHpkosT0yUWJ7ZKLE9shEaUSpEiW2xz3KZXty+WLDhyjfSo6V+UTJ07Cs+05hyIWSv/Kw69HGddvlZswPHyyfLifNNorl5lyL71miZc6TZZzWjVN8lCVeRidLxIxIlnEYMDM6WaJmdLLEzehkiZzRydLIUiZL9IxOlnifqlm+8kLBZdoU3gcbO71HifY5TZR5XAeR5+FDlDuK9Qsi2CQQKSCCpAKR54gE3BeIFBBBqYFIARFMHYgUEEEAgkgBEQMREHmOCLoSRAqIYEFBpIAIdhVECohgV0GkgAh2FUSeIxKxqyBSQAS7CiIFRLCrIFJABLsKIgVEDERA5Dki2FUQKSCCXQWRAiLYVRApIIJdDSDyHBHsKog8RyRhV0GkgAh2FUQKiGBXQaSACHYVRAqIGIiAyHNEsKsgUkAEuwoiBUSwqyBSQAS7CiIFRLCrIPIcEcOugkgBEewqiBQQwa6CSAER7CqIFBAxEAGR54hgV0GkgAh2FUQKiGBXQaSACHYVRAqIYFdB5DkiI3YVRAqIYFdBpIAIdhVECohgV0GkgIiBCIg8RwS7CiIFRLCrIFJABLt6GkSCxWuhbSlAEkdbtnrM4TkmaRrn9QCn6TqQ+CiXdCnHunG6ZSq9M4WOhSlvpvC3MOXM1ITwhSlvpjDEMPUqU5bWA0xm8z1TKGWY8mYKBw1TLzO1vSE72c0rsh9uHPO87jnmJRc2NtsytGl+vvE8rsc3L/dCYzLABmxFsPH9gN0Q2Mu0jXnI3wKbVQrAlgSbtRXAbgfsOY7rxvNkhY2HDdIf9yt96yxgNYizgLOA9SvOgrOeBdN2gEMO3zkLZlbcOAs4C1gj5CzY8yxIQ9gCH2Jhz5cMt7Mg5Xi78RutrD5Cazu0+gn1mSVQwJYE2wAbsBXBZgkUsBsC222laGYJFLAlwWYJFLDbAXvc6hynGO5VB0uV0HoeWllShNbT0Lqw9Aet56GVJTpobYfWVxaqw7I9HSTk4X49b2E9D7RF0WZFD7TPibbjraaLcRZwFnR/FrBWyFnAWcDCImfBWc8CtxuuF1YhOQs4C1jd5CzY9yzYqpFC/K7LYXUTWk9Da2Z1E1qbodWxgcwshAK2JNgsgwK2JNgsggJ2Q2C7+YtsgA3YimCzVAnYr4I9Wlw3HsfCr2pfeypO4XkgmSVFaG2HVr9fl2dWCQFbEmwW/gBbEmzWCAG7IbC9HpsQBpYTAVsSbJYTAbsdsJ//CjgMrBFC63loZeEPWs9Dq0ErtJ6GVpbooLUdWh0fmhAG1vNAWxRtVvRA+5xo+90QGgaW/zgLOAtYK+Qs6P4sCCwschac9SzwuuE6BFYhOQs4C1jd5CzY8yyo9JqwC8GADdiKYBtgA3Y7YLvdFhhYXgVsSbBZXAXsdsCuZR1Zh+Us4CxgHZaz4KxngZ91ZB2Ws6D7syCyDstZsO9Z4Pd04xBZL4XW89DKuia0NkOrYwMZWdcEbEmwDbABWxFs1jUBuyGw/fwF65qALQk2S5XnAXvOK31hCekD2G9hsuImFCYLRzphJtY/hMJkeeCcYQ7TgzCx50JhYoyFwjTC1AkTMygUJjZMKEwMkFCYGCChMDFAOmEaBkgoTAyQUJgYIKEwMUBCYRph6oSJARIKEwMkFCYGSChMDJBQmBggnTBHDJBQmBggoTAxQEJhYoCEwjTC1AkTAyQUJgZIKEwMkFCYGCChMDFAOmFOGCChMDFAQmFigITCxAAJhWmEqRMmBkgoTAyQUJgYIKEwMUBCYWKAdB4dM2OAhMLEAAmFiQESChMDJBSmEaZOmBggoTAxQBJPxX4LEwMkFCYGSChMDJBOmAsGSChMDJBQmBggoTAxQEJhGmHqhIkBEgoTAyQUJgZIKEwMkFCYGCCdMDMGSChMDJBQmBggoTAxQEJhGmHqhIkBEgoTAyQUJgZIKEwMkFCYGCCZMOOAARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yAARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yIARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yEARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ0zDAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQACYWJARIKEwOkE+aIARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8wJAyQUJgZIKEwMkFCYGCChMI0wdcLEAAmFiQESChMDJBQmBkgoTAyQTpgzBkgoTAyQUJgYIKEwMUBCYRph6oSJARIKEwMkFCYGSChMDJBQmBggnTAXDJBQmBggoTAxQEJhYoCEwjTC1AkTAyQUJgZIKEwMkFCYGCChMDFAOmFmDJBQmBggoTAxQEJhYoCEwjTC1AkTAyQUJgZIKEwMkFCYGCChMDFAMmGmAQMkFCYGSChMDJBQmBggoTCNMHXCxAAJhYkBEgoTAyQUJgZIKEwMkE6YAQMkFCYGSChMDJBQmBggoTCNMHXCxAAJhYkBEgoTAyQUJgZIKEwMkE6YEQMkFCYGSChMDJBQmBggoTCNMHXCxAAJhYkBEgoTAyQUJgZIKEwMkE6YCQMkFCYGSChMDJBQmBggoTCNMHXCxAAJhYkBEgoTAyQUJgZIKEwMkE6YhgESChMDJBQmBkgoTAyQUJhGmDphYoCEwsQACYWJARIKEwMkFCYGSCfMEQMkFCYGSChMDJBQmBggoTCNMHXCxAAJhYkBEgoTAyQUJgZIKEwMkE6YEwZIKEwMkFCYGCChMDFAQmEaYeqEiQESChMDJBQmBkgoTAyQUJgYIJ0wZwyQUJgYIKEwMUBCYWKAhMI0wtQJEwMkFCYGSChMDJBQmBggoTAxQDphLhggoTAxQEJhYoCEwsQACYVphKkTJgZIKEwMkFCYGCChMDFAQmFigHTCzBggoTAxQEJhYoCEwsQAVQ1zyWs58i9hvsVjxOMdz2zr+TMvoRBPXtZDzHneto0P65zytA052O3Gb1FidGSixOfIRInNkYkSlyMTJSZHJEob8DgyUWJxZKLE4chEicGRidKIUiVKbI9MlNgemSixPTJRYntkosT2qEQZsD0yUWJ7ZKLE9shEie2RidKIUiVKbI9MlNgemSixPTJRYntkosT2qEQZsT0yUWJ7ZKLE9shEie2RidKIUiVKbI9MlNgemSixPTJRYntkosT2qESZsD0yUWJ7ZKLE9shEie2RidKIUiVKbI9MlNgemSixPTJRYntkosT2qERp2B6ZKLE9MlFie2SixPa4R7lsj8ZebPgQ5VvJjZJ/ouRhWutxOaqxUPJxK95oNw+7HvOjY4zrtpcobkqXdj7TMDhdxo7t6TJ2zFCXsWORuowd49Rj7CN2qsvYMVldxo716jJ2DFmXsRux9xg7lq7L2LF0XcaOpesydixdl7Fj6XqMfcLSdRk7lq7L2LF0XcaOpesydiP2HmPH0nUZO5auy9ixdF3GjqXrMnYsXY+xz1i6LmPH0nUZO5auy9ixdF3GbsTeY+xYui5jx9J1GTuWrsvYsXRdxo6l6zH2BUvXZexYui5jx9J1GTuWrsvYjdh7jB1L12XsWLouY8fSdRk7lq7L2LF0PcaesXRdxo6l6zJ2LF2XsWPpqsY+T/F92znHA2M3Yu8xdixdl7Fj6bqMHUvXZexYui5jx9J1GPs4YOm6jB1L12XsWLouY8fSdRm7EXuPsWPpuowdS9dl7Fi6LmPH0nUZO5aux9gDlq7L2LF0XcaOpesydixdl7EbsfcYO5auy9ixdF3GjqXrMnYsXZexY+l6jD1i6bqMHUvXZexYui5jx9J1GbsRe4+xY+m6jB1L12XsWLouY8fSdRk7lq7H2BOWrsvYsXRdxo6l6zJ2LF2XsRux9xg7lq7L2LF0XcaOpesydixdl7Fj6XqM3bB0XcaOpesydixdl7Fj6bqM3Yi9x9ixdF3GjqXrMnYsXZexY+m6jB1L12PsI5auy9ixdF3GjqXrMnYsXZexG7H3GDuWrsvYsXRdxo6l6zJ2LF2XsWPpeox9wtJ1GTuWrsvYsXRdxo6l6zJ2I/YeY8fSdRk7lq7L2LF0XcaOpesydixdj7HPWLouY8fSdRk7lq7L2LF0XcZuxN5j7Fi6LmPH0nUZO5auy9ixdF3GjqXrMfYFS9dl7Fi6LmPH0nUZO5auy9iN2HuMHUvXZexYui5jx9J1GTuWrsvYsXQ9xp6xdF3GjqXrMnYsXZexY+m6jN2IvcfYsXRdxo6l6zJ2LF2XsWPpuowdS9dh7NOApesydixdl7Fj6bqMHUvXZexG7D3GjqXrMnYsXZexY+m6jB1L12XsWLoeYw9Yui5jx9J1GTuWrsvYsXRdxm7E3mPsWLouY8fSdRk7lq7L2LF0XcaOpesx9oil6zJ2LF2XsWPpuowdS9dl7EbsPcaOpesydixdl7Fj6bqMHUvXZexYuh5jT1i6LmPH0nUZO5auy9ixdF3GbsTeY+xYui5jx9J1GTuWrsvYsXRdxo6l6zF2w9K9GnuyQux5GtddDyEWch9t3XhcbgY92MNh2FqQFJab5ON7mLi3E4UZtz2n+ChMjJpQmHgyoTCNMHXCxGkJhYmpEgoT/yQUJlZJKExckU6YIwaobpjTsBq6ywJrIcxlWrddlnAziOk9SwTQebLM43qEeR4+ZLmr8R3xSjBSYgRdBSMlRgxGYKTACHINRkqM4OxgpMQIKhBGSoxgGGGkxAjiEkYKjEz4UBgpMYJnhZESI3hWGCkxgmeFkRIjBiMwUmAEzwojJUbwrDBSYgTPCiMlRvCsMFJiBM8KIwVGZjwrjJQYwbPCSIkRPCuMlBjBs8JIiRGDERgpMIJnhZESI3hWGCkxgmeFkRIjeFYYKTGCZ4WRAiMLnhVGSozgWWGkxAieFUZKjOBZYaTEiMEIjBQYwbPCSIkRPCuMlBjBs8JIiRE8K4yUGMGzwkiBkYxnhZESI3hWGCkxgmeFkRIjeFYYKTFiMAIjBUbwrDBSYgTPCiMlRvCsMFJiBM8KIyVG8Kww8pyRecCzwkiJETzreRgJFq+VtqVASRxt2Qoyh+ecpGmc1yOcputA4qNgUhrWPad0C1V6hwoxC1TuUGFygcodKgMqoPKGClcMVC9DZWkNJpnN91Ahl4HKHSpsNFC9DtX2au1kN+/WfrhxzPO655iXXNjYbAvRpvn5xvO4Ht+8PPAaOHTI1iQb8w/ZLZG9TNuYh/wdsgPrFZCtSTarLJDdENlzXGsX58kKGw8bpXEY07dOA9aFOA04DQIrWZwGpz0Npu0Ahxy+dRoYpwGnAacBq4WcBrueBmkIW+JDLOz5EuJ2GqQcbzd+w5V1SHBtCFc/sR5YDIVsTbJZDIVsTbJZDIXslsh2WzKKLIZCtibZLIZCdkNkj8sW4hTDnfCILFqC64lwZXERXE+Eq4EruJ4HVxbrwLUhXF9Zsw7L9tiQkIf7lb3Iyh5sq7LN2h5sn5RtxztPIwuBnAacBpFVQ04DToPEEiOnwWlPA7cbsBPrkZwGnAaJdU5Og51Pg7w9jSrEbxqdxDonuJ4IVwNXcG0GV88ukiVRyNYkmwVRyNYkm+VQyG6JbD+LwQonZGuSzaIlZL9M9mhx3XgcCz+1fe1xOYXnhBiLi+DaEK5+vzk31gshW5NslgAhW5NsVgshuyWy3Z6mYAbZkC1JNguLkN0Q2YWfBhurheB6IlxZAgTXE+HKuh64nghXFuvAtSFcPZ+lMLKyB9uqbLO2B9snZdvx/tCRhUBOA06DkVVDTgNOg9E4DTgNznoauN2APbIeyWnAaTCyzslpsOtpUOtlYiNLopCtSTarp5DdEtluNwmOLLRCtiTZE8uskN0Q2ZXk48SKLKcBp8HEiiynwWlPAzf5OLEiy2nAaTAZpwGnwb6ngePDjydWTsH1RLiywgmu7eDq2UWywgnZmmSzwgnZmmSzwgnZLZHtZjFmVjghW5NsFi1PRPacV/zCEtIHst/SZO1NKU2WkJTSNNIUSpOFgpOmOUwP0sSjK6WJO1ZKE1+qlCaOUCjNBS+mlCYuSClNXJBSmrggpTSNNIXSxAUppYkLUkoTF6SUJi5IKU1ckFCaGReklCYuSClNXJBSmrggpTSNNIXSxAUppYkLUkoTF6SUJi5IKU1ckE6ay4ALUkoTF6SUJi5IKU1ckFKaRppCaeKClNLEBSmliQtSShMXpJQmLkgozYALUkoTF6SUJi5IKU1ckM4TZpZgpCmUJi5IKU1ckFKauCClNHFBSmnigoTSjLggjedov6WJC1JKExeklCYuSClNI02hNHFBSmnigpTSxAUppYkLUkoTFySUZsIFKaWJC1JKExeklCYuSClNI02hNHFBSmnigpTSxAUppYkLUkoTFySUpuGClNLEBSmliQtSShMXpJSmkaZQmrggpTRxQUpp4oKU0sQFKaWJCxJKc8QFKaWJC1JKExeklCYuSClNI02hNHFBSmnigpTSxAUppYkLUkoTFySU5oQLUkoTF6SUJi5IKU1ckFKaRppCaeKClNLEBSmliQtSShMXpJQmLkgozRkXpJQmLkgpTVyQUpq4IKU0jTSF0sQFKaWJC1JKExeklCYuSClNXJBQmgsuSClNXJBSmrggpTRxQUppGmkKpYkLUkoTF6SUJi5IKU1ckFKauCChNDMuSClNXJBSmrggpTRxQUppGmkKpYkLUkoTF6SUJi5IKU1ckFKauCCdNPOAC1JKExeklCYuSClNXJBSmkaaQmnigpTSxAUppYkLUkoTF6SUJi5IKM2AC1JKExeklCYuSClNXJBSmkaaQmnigpTSxAUppYkLUkoTF6SUJi5IKM2IC1JKExeklCYuSClNXJBSmkaaQmnigpTSxAUppYkLUkoTF6SUJi5IKM2EC1JKExeklCYuSClNXJBSmkaaQmnigpTSxAUppYkLUkoTF6SUJi5IKE3DBSmliQtSShMXpJQmLkgpTSNNoTRxQUpp4oKU0sQFKaWJC1JKExcklOaIC1JKExeklCYuSClNXJBSmkaaQmnigpTSxAUppYkLUkoTF6SUJi5IKM0JF6SUJi5IKU1ckFKauCClNI00hdLEBSmliQtSShMXpJQmLkgpTVyQUJozLkgpTVyQUpq4IKU0cUFKaRppCqWJC1JKExeklCYuSClNXJBSmrggoTQXXJBSmrggpTRxQUpp4oKU0jTSFEoTF6SUJi5IKU1ckFKauCClNHFBQmlmXJBSmrggpTRxQUpp4oKU0jTSFEoTF6SUJi5IKU1ckFKauCClNHFBMmmmYcAFKaWJC1JKExeklCYuSClNI02hNHFBSmnigpTSxAUppYkLUkoTFySUZsAFKaWJC1JKExeklCYuSClNI02hNHFBSmnigpTSxAUppYkLUkoTFySUZsQFKaWJC1JKExeklCYuSClNI02hNHFBSmnigpTSxAUppYkLUkoTFySUZsIFKaWJC1JKExeklCYuSClNI02hNHFBSmnigpTSxAXVTXPJaz3yL2m+5YPdcc8nhLztO9rHgN6KjoT5TNHTvBU9LUuh6DZvf7ZsDqWtL+Nez6GY8rXWMb0lZIiV2gmZbeO2ab5N6H7jeVzet52Xa0Hi+984w6tUD3OZtnEP+VtholVqhzku27inGO7/dqJKaic0x+3qNt8c5cPTLSzLWpKQhweXQiNOpTiRJWeKMw5bMHEY07eunIiVXpNHwpwr+WnZks/hW8mjd3pNHsf0meRjnrbkp1zIMgzb1iHEG7E3DY807TYRy3m+zefBjtN1xxbuwxzRUUJhoqOEwkRHCYWJuRIK0whTJ0yslVCYiCihMHFLQmGii4TCxADphDlhgITCxAAJhYkBEgoTAyQUphGmTpgYIKEwMUBCYWKAhMLEAAmFiQHSCXPGAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQACYWJARIKEwOkE+aCARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yMARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTA+Qf5mWwW/XycGCYGCCZMMOAARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yAARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yIARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yEARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ0zDAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQA+YcZ47juO07xwDAxQEJhYoB0whwxQEJhYoCEwsQACYWJARIK0whTJ0wMkFCYGCChMDFAQmFigITCxADphDlhgITCxAAJhYkBEgoTAyQUphGmTpgYIKEwMUBCYWKAhMLEAAmFiQHSCXPGAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQACYWJARIKEwOkE+aCARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAAJhYkBEgoTAyQUJgZIJ8yMARIKEwMkFCYGSChMDJBQmEaYOmFigITCxAD5h5mGZd13Gq0Q5jKtu16WcLPt9B4QVqdyQHlch53n4UNA+56ZGKBOg8cWdRl8HDBLnQaPheo0eIxVp8FjtzoN3gi+z+CxZp0Gj2HrNHjMXafBY+46DR5z12fwAXPXafCYu06Dx9x1GjzmrtPgjeD7DB5z12nwmLtOg8fcdRo85q7T4DF3fQYfMXedBo+56zR4zF2nwWPuOg3eCL7P4DF3nQaPues0eMxdp8Fj7joNHnPXZ/AJc9dp8Ji7ToPH3HUaPOau0+CN4PsMHnPXafCYu06Dx9x1GjzmrtPgMXd9Bm+Yu06Dx9x1GjzmrtPgMXedBm8E32fwmLtOg8fcdRo85q5y8MHitXy2FKKPoy3bUc7hefhpGud12NM0Xjd+VO10HXVKt6Skd1JQfZDyOVJwg5DyKVJGZCKkfI4U7COkvG1saa12MpvvSUFXQsrnSMFvQso7Kdt7HJPdvMjx4cYxz+ueY15yYWOzLRmb5ucbz+N6fPNy36qPBq7geh5cccngujuuy7SNecjfwhUDDq4nwhVvD6574zpv77WP82SFjYcNvTiM6Vtss9IA26psszYC222xPW0HOOTwHbYnVnNgW5Vt1p9g+3W20xC2GIdY2PMlmY3tlOPtxm8MsrIFg3sz6CeAJ5bXwPVEuBq4gut5cGV5DVx3x9VtvWJieQ1cT4Qry2vgujeu47IlM8Vw3+6zDAaDtRlkuQoGKzM4s6wEg7UZZPkHBvdm8JWlzbBszwAIebhfK5pZKwLYUwHLahHAtgSs401/s8E2bIuyzToUbKuyzaIVbLfFttsNrTMrXLCtyjYrZ7D9Fbbz9ryYEL/rM1g5g8HKDC6snMHgzgw6tlsLi2zgeiJcWWID1xPhygIbuO6Oq1sPvxi4gut5cGUZDFzfNh4trhuPY+E3fq89+6LwfICF5SoY3JtBv1+wLqxAgeuJcGVRCVxPhCvrT+C6O65uP7jOLFWB64lwZakKXPfGtfCbxMz6EwzWZpBFJRiszaDBIAxWZpDlHxjcm0HPn1tn1ooA9lTAsloEsC0B63hrXmZpCbZV2WYdCrY12U4Di1aw3RbbXje0poEVLthWZZuVM9h+ne1Kr3pJA4ts4HoiXA1cwXVvXL1u5UoDS3fgeiJcWbgD171xreXTWOODbVW2WeOD7bbY9vNprPHBtijbgTU+2P4K237P8UyBtTgYrM0ga2YwuDODju1WYM0MXE+Eq4EruJ4HV9bMwHV3XP16eNbMwPVEuLIMVhvXOa9MhSWkD7i+RcRqTvMRsSjRekQRt958RKjnliIapgcRYWabjwgb2XxERkStR4R1aj4iTEvzEWEXmo8Iu9B8RNiF1iNK2IXmI8IuNB8RdqH5iLALzUdkRNR6RNiF5iPCLjQfEXah+YiwC81HhF1oPSLDLjQfEXah+YiwC81HhF1oPiIjotYjwi40HxF2ofmIsAvNR4RdaD4i7ELrEY3YheYjwi40HxF2ofmIsAvNR2RE1HpE2IXmI8IuNB8RdqH5iLALzUeEXWj9R/0TdqH5iLALzUeEXWg+IuxC8xEZEbUeEXah+YiwCw0/4fItIuxC8xFhF5qPCLvQekQzdqH5iLALzUeEXWg+IuxC8xEZEbUeEXah+YiwC81HhF1oPiLsQvMRYRdaj2jBLjQfEXah+YiwC81HhF1oPiIjotYjwi40HxF2ofmIsAvNR4RdaD4i7ELrEWXsQvMRYReajwi70HxE2IXmIzIiaj0i7ELzEWEXmo8Iu9B8RNiF5iPCLjQekQ3YheYjwi40HxF2ofmIsAvNR2RE1HpE2IXmI8IuNB8RdqH5iLALzUeEXWg9ooBdaD4i7ELzEWEXmo8Iu9B8REZErUeEXWg+IuxC8xFhF5qPCLvQfETYhdYjitiF5iPCLjQfEXah+YiwC81HZETUekTYheYjwi40HxF2ofmIsAvNR4RdaD2ihF1oPiLsQvMRYReajwi70HxERkStR4RdaD4i7ELzEWEXmo8Iu9B8RNiF1iMy7ELzEWEXmo8Iu9B8RNiF5iMyImo9IuxC8xFhF5qPCLvQfETYheYjwi60HtGIXWg+IuxC8xFhF5qPCLvQfERGRK1HhF1oPiLsQvMRYReajwi70HxE2IXWI5qwC81HhF1oPiLsQvMRYReaj8iIqPWIsAvNR4RdaD4i7ELzEWEXmo8Iu9B6RDN2ofmIsAvNR4RdaD4i7ELzERkRtR4RdqH5iLALzUeEXWg+IuxC8xFhF1qPaMEuNB8RdqH5iLALzUeEXWg+IiOi1iPCLjQfEXah+YiwC81HhF1oPiLsQusRZexC8xFhF5qPCLvQfETYheYjMiJqPSLsQvMRYReajwi70HxE2IXmI8IuNB7ROGAXmo8Iu9B8RNiF5iPCLjQfkRFR6xFhF5qPCLvQfETYheYjwi40HxF2ofWIAnah+YiwC81HhF1oPiLsQvMRGRG1HhF2ofmIsAvNR4RdaD4i7ELzEWEXWo8oYheajwi70HxE2IXmI8IuNB+REVHrEWEXmo8Iu9B8RNiF5iPCLjQfEXah9YgSdqH5iLALzUeEXWg+IuxC8xEZEbUeEXah+YiwC81HhF1oPiLsQvMRYRdaj8iwC81HhF1oPiLsQvMRYReaj8iIqPWIsAvNR4RdaD4i7ELzEWEXmo8Iu9B6RCN2ofmIsAvNR4RdaD4i7ELzERkRtR4RdqH5iLALzUeEXWg+IuxC8xFhF1qPaMIuNB8RdqH5iLALzUeEXWg+IiOi1iPCLjQfEXah+YiwC81HhF1oPiLsQusRzdiF5iPCLjQfEXah+YiwC81HZETUekTYheYjwi40HxF2ofmIsAvNR4RdaD2iBbvQfETYheYjwi40HxF2wT+iOW77XpZQimiIaVw3H+JtSHl+tP24VfAy2HhT7oc7n7eNQ/yw8Vv8Rvw9x48VqR//HK/xL1Mh/njZ5XqceRi+GT/Gpev4sTldx48p2jf+nArx5y3N/CPu923jw0qnbRjBgt1u/BYmTkknzIx9EgoTTyUUJkZLKEzcl1CYRpg6YeKlhMLEMgmFiTMSChMDJBQmBkgmzGnAAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQACYWJARIKEwOkE2bAAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQACYWJARIKEwOkE2bEAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQACYWJARIKEwOkE2bCAAmFiQESChMDJBQmBkgoTCNMnTAxQEJhYoCEwsQAuYcZh23rGNLHZ0e/FR1T85mij2EdSRpTKhR9mdaaf3xc9/RecnyKe8nzuA4kz8OHku/6J8uwKTJR4lJkosSkyESJR5GJ0ohSJUocikyUGBSZKPEnMlFiZWSixPaoRDlie2SixPbIRIntkYkS2yMTpRGlSpTYHpkosT0yUWJ7ZKLE9shEie1RiXLC9shEie2RiRLbIxMltkcmSiNKlSixPTJRYntkosT2yESJ7ZGJEtujEuWM7ZGJEtsjEyW2RyZKbI9MlEaUKlFie2SixPbIRIntkYkS2yMTJbZHJcoF2yMTJbZHJkpsj0yU2B6ZKI0oVaLE9shEie2RiRLbIxMltkcmSmyPe5TB4rUgthTCjKMt27jn8DzOHz+IXQcyTeN140f1S2lY95zSbfbpLfuMHuo3e3xSv9kjoPrNHmOlm72lbdRm8332RvbdZo8TE85+exNPsptX8TzcOOZ53XPMSy5sbLbV2qb5+cbzuB7fvNw3mhmTB4BVAcQ/AuAXAFy2N8uNQ/4WgFhTAKwKIK4XAF8HcI7juvE8WWHjYYMpDmP6Bq3zgJ2G1vPQik+H1r1pnbYDHHL4Fq2sAEDreWhlzQJaf248hC2YIRb2fKn1RmvK8XbjN6oMqqDqZarchOQ8sCQDgFUBZEkGAKsCyJIMAH4BQC8jPg8syQBgVQBZkgHA1wEcl63WUwx3rW1g6QSq/KliiQOq/KliKQKq/KliyQCqXqfqlQWusGy/wg15uF9fCAaCIFgXQVYYQHBfBB1voQosR0DreWhl7QJaz0MrCx3Qujetbjf8BVZFoPU0tEZWW6D1jda8HWKI3+zdI6stUOVPFastUPUyVY6NSGRhBgCrAmgACIA1AWRRBgC/AKBfv8o6CwBWBZClE10AR4vbqMfCr4Ne+/V54fe8kSUOqHqdKr9fs0VWLQCwJoCJhQgArAogaxYA+AUA3X5OmVjeAMCqALK8AYCvA1j4NVMyqIIqd6pYiIAqf6pYXYAqf6pYMoCq16ny/DFlYn0BBCsjyAoDCO6LoOONTsZyBLSeh1bWLqD1PLSy0AGte9PqdsOfsSoCreeh1aAVWn9sXOmx+MbCDABWBZA1HAD8AoBut9EYyz0AWBVAFnsA8HUAa9kg1oWg9TS0jqwLQevetLrZoJF1IWg9D62sC0HrG62OT40bWb+BKn+qDKqg6lWqPBsR1lkAsCqArLMAYFUAWWcBwC8A6Nevss4CgFUBZOnEH8A5r5SEJaQPAP4s+sQKQIWiI7IrFB0fW6Ho6Mp9iz5MD4puFP34omOwKhQda1Oh6JiKCkWnO69QdDrS44s+05FWKDodaYWi05FWKDodaYWiG0U/vuh0pBWKTkdaoeh0pBWKTkdaoeh0pMcXfaEjrVB0OtIKRacjrVB0OtIKRTeKfnzR6UgrFJ2OtELR6UgrFJ2OtELR6UiPL3qmI61QdDrSCkWnI61QdDrSCkU3in580elIKxSdjrRC0elIKxSdjrRC0elIDy/6MtCRVig6HenhP2lcBjrSCkWnI61QdKPoxxedjrRC0elIKxSdjrRC0elID33K01vR6UiPL3qgI61QdDrSCkWnI61QdDrSCkU3in580elIKxSdjrRC0elIKxSdjrRC0elIjy96pCOtUHQ60gpFpyOtUHQ60gpFN4p+fNHpSCsUnY60QtHpSCsUnY60QtHpSI8veqIjrVB0OtIKRacjrVB0OtIKRTeKfnzR6UgrFJ2OtELR6UgrFJ2OtELR6UiPL7rRkVYoOh1phaLTkVYoOh1phaIbRT++6HSkFYpOR1qh6HSkFYpOR1qh6HSkxxd9pCOtUHQ60gpFpyOtUHQ60gpFN4p+fNHpSCsUnY60QtHpSCsUnY60QtHpSI8v+kRHWqHodKQVik5HWqHodKQVim4U/fii05FWKDodaYWi05FWKDodaYWi05EeX/SZjrRC0elIKxSdjrRC0elIKxTdKPrxRacjrVB0OtIKRacjrVB0OtIKRacjPb7oCx1phaLTkVYoOh1phaLTkVYoulH044tOR1qh6HSkFYpOR1qh6HSkFYpOR3p80TMdaYWi05FWKDodaYWi05FWKLpR9OOLTkdaoeh0pBWKTkdaoeh0pBWKTkd6eNHzQEdaoeh0pBWKTkdaoeh0pBWKbhT9+KLTkVYoOh1phaLTkVYoOh1phaLTkR5f9EBHWqHodKQVik5HWqHodKQVim4U/fii05FWKDodaYWi05FWKDodaYWi05EeX/RIR1qh6HSkFYpOR1qh6HSkFYpuFP34otORVig6HWmFotORVig6HWmFotORHl/0REdaoeh0pBWKTkdaoeh0pBWKbhT9+KLTkVYoOh1phaLTkVYoOh1phaLTkR5fdKMjrVB0OtIKRacjrVB0OtIKRTeKfnzR6UgrFJ2OtELR6UgrFJ2OtELR6UiPL/pIR1qh6HSkFYpOR1qh6HSkFYpuFP34otORVig6HWmFotORVig6HWmFotORHl/0iY60QtHpSCsUnY60QtHpSCsU3Sj68UWnI61QdDrSCkWnI61QdDrSCkWnIz2+6DMdaYWi05FWKDodaYWi05FWKLpR9OOLTkdaoeh0pBWKTkdaoeh0pBWKTkd6fNEXOtIKRacjrVB0OtIKRacjrVB0o+jHF52OtELR6UgrFJ2OtELR6UgrFJ2O9PiiZzrSCkWnI61QdDrSCkWnI61QdKPoxxedjrRC0elIKxSdjrRC0elIKxSdjvTootsw0JFWKDodaYWi05FWKDodaYWiG0U/vuh0pBWKTkdaoeh0pBWKTkdaoeh0pMcXPdCRVig6HWmFotORVig6HWmFohtFP77odKQVik5HWqHodKQVik5HWqHodKTHFz3SkVYoOh1phaLTkVYoOh1phaIbRT++6L12pDZei77kwtZ5K0eertUIeX4vok6HOcZ5K+LNmH9H7jKvO7/893LD15weRnSpybr7dGHzw/ZvpdTpG6uXUqcbfK2UKQxxHXX6uc1daR72bGtdhudFmcd16PN88/c3PTrOcQnj+8bjkuL3Q03DGUd++de//edf/vrXv/zP//bXv//7n//5l7//7R8/Pj38+B+PG+hpWf+azzHcjHX8UYfH7d/zj4TXPxJf/0h68SOXf4UfWz6+hEx5BXmebq5o9hOGx38qn39kef0j+eWPPGb0+UfC6x95mM6y/V1Zwv1H0usfsdc/Mr7+ken1j8yvf2R5/SMP01/m9Q/OMudfP2LD6x8Jr38kvv6R9PpH7PWPjK9/5HH6y7J+5DLP/PUj8+sfWV7/SH75I49fy/z8I+H1j8TXP/Iw/bw1Uznewf/4daTPPzK+/pHp9Y/Mr39kef0j+eWPPH4F2u1H7nJ5/AKv5x+Jr3/kcfq2tXV2d1Y+fvXP84+Mr39kev0j8+sfWV7/SH75I49fN5Cnde4eBhs/fOZfXtn4xxeEvb8g7v0Fae8vsL2/YNz7C6a9v2De+wuWvb8g7/wFy95n8rL3mbzsfSYve5/Jy95n8rL3mbzsfSYve5/Jy95n8rL3mZz3PpPz3mdy/v55MM7zprKus5aY3/Y/7rz/7zM0Deusaxqmu/3nffcfhmHvLwh7f8GrF4MfHwrLvlyEkHf+gjjs/QVh7y/4/lV82rz0FNP9F6S9v8D2/oJx7y+Y9v6C2eH0z9sX2P0XLHt/Qd75C9Kw9xeEvb8g7v0FaeeLSLK9v2Dc+wumvb9g3vsLlr2/YO/JlO09mbK9J1MW9/6Cvc9k2/tMtr3PZNv7TLa9z2Tb+0y2vc/kce8zedz7TB73PpPHXc/ky7/ijy0f3+Y0jutiYBjn6y1A8dGXLNuNS8s8Pd/00hZO637jcDMNsZ+9eDtD+c1v9uuMJTQ0ltjQWFJDY7H9xvLzb8G3d5/DejdQjuO3DnVqaCxzQ2NZGhpLbmcscWhoLGG/sfzpd7c8+u0+7bt723f34767n/bd/bzv7pd9d5933X0a9t3998G8rJLYNm2+tahP7jn1/ILvx3tR1dvEP87xly+wuPMRWNr7C/YO2WaHL1i2X38MNzdJxie3iHp+Qd75C8Zh7y8Ie3+Bx3kwx+sXLL9+Qdr7C2zvLxj3/oJp7y+Y9/6CZe8vyDt/wTTs/QVh7y9wOJMv18x144sP/PUL0t5fYHt/wbj3F0x7f8G89xcse39B3vkL5mHvL3A4k8Oy/dA15PzrF8S9vyDt/QXTztP3ed77C/ZuQOa88xcsce8vSHt/ge39BePeX7DveXD5R/qx6UNW5+1z8xKef4cN63gsFjZdtinI7UMDovmsXTU+5seLXK0POpxx0PGMg05nHLTtNeg//W4Z7pWdbw8EsdF+3fm0587nPXe+7LnzvOPO47f/Ai4rt7b8Khxj2HPncc+dpz13/t0zdBy2m96HX61BHPfc+bTnzuc9d77suPP0XRTHuP5BH+PdztOeO/9uoFPabqoef50sp3nHndueZbFvn6G20TLeLWKMe+582nPn8547X/bced5x5+Ow587DnjuPe+487blzxzN0+vVms3Hcc+ffP0O3P1x3t8mN3z5Dtz+5D3a+7LnzvOPOp++eodOw/QJt+NWNTmHPncc9d5723LntufNvn6F5XRCYbp5aFp8s+njtfN5z58ueO8877nwe9tx52HPncc+dpz13bo47v1sxGvfc+ffP0PU+qSne7fzbZ+im5x7sfNlz53nHnS/fvoY+6eaWsOfO4547T3vu3Pbc+bjnzvcUC8t+YuHyD/ux4ePV4sm22wimqfRzGQubpbf46yH85idNr33B7SPoCxvv/funEww8nXXgdtaBj2cd+HTWgc+NDPxPv/012G5j2funY+0P/De/MzvBwMNZBx7POvB01oFbIwP/029/z1dnLFNDY5kbGksrV6E//fY3iFXGklq5Vvzpdy/vqDSWVv6i/+l3K/+VxnLwOf2lX5NWGo0dzG/hh7DWVG3GpkYzNTWafPRovvDT11qjCU2NJjY1mtTUaA7/e/OF3/bWGs3U1GjmpkazNDWa3NJopqGp0YSmRhObGk1qajRH/y3+yq+za41mamo0c1OjWZoaTW5pNPPQ1GhCU6OJTY3m6L/Fz38yb02NZmxqNEtLxmTOLY1mGZoaTVNua7GmRjM2NZqpqdHMTY2mob83l3+MPzb9zTvow2YMp5Bvnm7+4xb4B4OK13vM7OZ1uj/uxrjf97DdURuvB3DZx+/X4F8dzrTpTpvn0nA2qzQPw91wHs4spnS9QdWGUBhODmsIeboZTHg49HFTXLdd1fxwv2PcFkrGm1sNww839mDr7ZW3H/b8+2V4uaO0Lo5y7OIopy6Ocu7iKJcujjL3cJSP7+eQO8rQxVF2MfdJDnOfMNiNDc+F45zS9mSjKVlp3/O28XxzN0yI+efg7cyDH888+OnMg5/PPPjlzIPPJx68DWcefDjz4OOZB3/mK6yd+QprZ77C2pmvsHbmK6yd+QprZ77Cjme+wo5nvsKOZ77Cjme+wo5nvsKOZ77Cjme+wo5nvsKOZ77Cjme+wk5nvsJOZ77CTme+wk5nvsJOZ77CTme+wk5nvsJOZ77CTme+wk5nvsLOZ77Czme+ws5nvsLOZ77Czme+ws5nvsLOZ77Czme+ws5nvsLOZ77CLme+wi5nvsIuZ77CLme+wi5nvsIuZ77CLme+wi5nvsIuZ77CLme+wuYzX2Hzma+w+cxX2HzmK2w+8xU2n/kKm898hc1nvsLmM19h85mvsGE48yU2DGe+xobhzBfZMJz5Knv54lOP/szX2TCc+UIbhjNfacNw5kvt5SNnHn049bU2nPpaG059rQ2nvtaGU19rw6mvteHU19pw6mttOPW1Npz6WhtPfa2Np77WxlNfa+Opr7UeT9eqOPpTX2vjqa+18dTX2njqa2089bU2nfpam059rU2nvtae+qlP4dSPfQqnfu5TOPWDn8Kpn/wUTv3op3DqZz+FUz/8KZz66U/h1I9/Cqd+/lM49QOgwqmfABVO/QiocOpnQIVTPwQqnPopUOHUj4EKp34OVDj1g6DCqZ8EFU79KKhw6mdBhVM/DCqc+mlQ4dSPgwqnfh5UOPUDocKpnwgVTv1IqHDqZ0KFUz8UKpz6qVDh1I+FCqd+LlQ49YOhwqmfDBVO/WiocOpnQ4VTPxwqnPrpUOHUj4cKp34+VPjEA6LCWBr9OG5vaB2X4cN33G8dw/aK1hiW0ttQQ05h3Xe+rcxvXla6HettXdKjbW1ad2xL/LDtz7rMvdYlLSuK47Dc12WhLg/rkqnLo7p84mFcfdYlUJeHdYnU5WFdEnV5WBejLg/rMlKXh3Xpdr5bqAvz3cd1Yb77uC7Mdx/WJWvNd+e01SV+ry4V5rtmW13yWDjSmIb1JdiX/7x1Kult/PHk408nH7+dfPzjycc/nXz888nHv5x8/PnU44/DcPLxn/v6G4dzX3/jcO7rbxzOff2Nw7mvv3E49/U3Due+/sbh3NffOJz8+htOfv0NJ7/+hub//l+3TtN4P/7m//4Xxt/63x+z1StFm6b78bf+96cw/tj635/S+Fv/+1Maf+vzf8vzuvWY5g/jf+BKU1jHnVK8sbDD/Ha0rXcLvkfb+rXF92hbvxL5Hm3rfYvv0bbe5fgebfNzEtejbX4G89rRprQdrU13R5uan++4Hm3zsyPXoxWbSxWOVmwuVTha6+poxeZShaMVm0ttP8BIabb7oxWbSxWOVmwuVThasbnU86M1sblU4WjF5lKFoxWbSxWOVmwudXO0t78BXI/WujpasblU4Wi15lJ2nTnag5mjac2lSkerNZcqHa3WXKpwtKPWXKp0tFpzqdLRas2lSkerNZeycbve2nQ/c/zEsyuVjlZrLlU6WrG5VOFoxeZShaMVm0sVjlZsLvX8aCexudSct6PN9x3fJDaXKhyt2FyqcLRic6nC0VpXRys2lyocrdhcqnC0YnOp69GOw3B/tGJzqcLRis2lnh/trDWXGq8zx/HBzHHWmkuVjlZrLlU6Wq25VOlorauj1ZpLlY5Way5VOlqtudQ4Xa+3D9ZvZ625VOloteZShaNdxOZShaMVm0sVjlZsLlU4WrG5VOFoTetot63TFO47vkVsLlU4WrG5VOFoxeZShaMVm0sVjlZsLvX8aLPYXKpwtGJzqdujXe6PVmwuVThasblU4WhN6min6Xq0y4PzVmsuVTparblU6Wi15lKlo9WaS5WOVmsu9fxoU/PPgPU9Wq251LSM29HePvd+PVqtuVTpaLXmUqWjta6OVmwuVThasblU4WjF5lKFo9WaS81h3Xea43J/tFpzqcLRNv88X9+j1ZpLlY5Way5VOlqtuVTpaK2ro9WaS90ebZruj1ZrLlU6Wq25VOFom39yy/Pnn6fmn8VSGv+5nz+fmn9eSmn8zZ/tw/X550O+H3/zvVBh/M13N8/H3/5zRwrjb74DKYy/+Z6iMP7mr7/L9f0vebkff/PX38L4m7/+Fsbf/PW3MP7m3/9VGH/z7/8qjL/59389H3/zz6oojb/5938Vxt/8+zcL4z/59bf5Zz6Uxn/y62/zz2Uojf/k19/mn51QGv/Jr7/NP9+gNP6TX3+bfwZBafxnvv5e/jX92PbxSywtxPdP2pSuH7Tl5y2Sw+sfCa9/JL7+kfTiRy7/mn9s+fBCGKc1xzjfyA+bf35u+Vm8hzOAcV61yTTd/KLQxp8fzD8/+LgeGwtjuHldbco/Du7xCvTzj6TXP2Kvf2R8/SPT6x95eLEfw7qeNI7Lh488ONWGeQ00DMv15Inp5+n8+G20nl+Qd/6Cx+el5xeEvb8g7v0Fae8vsO9/QR62L7i5g2z9gnHvL5j2/oJ57y9Y9v6CvPMXpGHvL/j+mRy2xfkQYrr7grj3F6S9v8D2/oJx7y+Y9v6Cee8vWFy/IIW7L8g7f4ENe3+Bw5k8Xr9gusvA4t5fkPb+Atv7C8a9v2Da+wvmXb/g8q8fN0f/1x/j4+lLymFr0W66WguXj17++f//+T//8ud/++t//OPykR//3//9t3//51/+/rf3f/7z//yvt//PZeP/Bw=="},{"name":"_call_mint_on_token","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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"}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Counter::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::constructor_parameters","fields":[{"name":"token","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::claim_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::claim_private_parameters","fields":[{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Counter::_call_mint_on_token_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::_call_mint_on_token_parameters","fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Counter::increment_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::increment_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"outgoing_viewer","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Counter::claim_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::claim_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"Counter::initialize_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Counter::initialize_parameters","fields":[{"name":"headstart","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"owner","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"outgoing_viewer","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000906cb9c3"},{"kind":"string","value":"EcdsaPublicKeyNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000906cb9c3"},{"kind":"string","value":"EcdsaPublicKeyNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000906cb9c3"},{"kind":"string","value":"EcdsaPublicKeyNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}]}],"storage":[{"kind":"struct","fields":[{"name":"public_key","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]},{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"pending_shields","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}}]},{"kind":"struct","fields":[{"name":"counters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"token","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"portal_address","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}}]}]}},"file_map":{"2":{"source":"use crate::cmp::Ord;\nuse crate::option::Option;\nuse crate::convert::From;\n\nimpl<T, let N: u32> [T; N] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    pub fn sort(self) -> Self where T: Ord {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        let sorted_index = unsafe {\n            // Safety: These indices are asserted to be the sorted element indices via `find_index`\n            let sorted_index: [u32; N] = self.get_sorting_index(ordering);\n\n            for i in 0..N {\n                let pos = find_index(sorted_index, i);\n                assert(sorted_index[pos] == i);\n            }\n\n            sorted_index\n        };\n\n        // Sort the array using the indexes\n        let mut result = self;\n        for i in 0..N {\n            result[i] = self[sorted_index[i]];\n        }\n        // Ensure the array is sorted\n        for i in 0..N - 1 {\n            assert(ordering(result[i], result[i + 1]));\n        }\n\n        result\n    }\n\n    /// Returns the index of the elements in the array that would sort it, using the provided custom sorting function.\n    unconstrained fn get_sorting_index<Env>(self, ordering: fn[Env](T, T) -> bool) -> [u32; N] {\n        let mut result = [0; N];\n        let mut a = self;\n        for i in 0..N {\n            result[i] = i;\n        }\n        for i in 1..N {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                    let old_j = result[j];\n                    result[j] = result[i];\n                    result[i] = old_j;\n                }\n            }\n        }\n        result\n    }\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Convert a sequence of bytes as-is into a string.\n    /// This function performs no UTF-8 validation or similar.\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\n// helper function used to look up the position of a value in an array of Field\n// Note that function returns 0 if the value is not found\nunconstrained fn find_index<let N: u32>(a: [u32; N], find: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..a.len() {\n        if a[i] == find {\n            result = i;\n        }\n    }\n    result\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n","path":"std/array.nr"},"5":{"source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Responds with undefined data for `index` where `self.len < index < self.max_len()`.\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Does not check whether the passed `index` is a valid index within the vector.\n    ///\n    /// Silently writes past the end of the vector for `index` where `self.len < index < self.max_len()`\n    /// Panics if the given index points beyond the maximum length of the vector (`self.max_len()`).\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"22":{"source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n","path":"std/embedded_curve_ops.nr"},"23":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"24":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field/mod.nr"},"27":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\nuse sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\ntrait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n","path":"std/hash/mod.nr"},"32":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"53":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"59":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n","path":"std/slice.nr"},"62":{"source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            \n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n","path":"std/uint128.nr"},"64":{"source":"\n\n// Minimal implementation of the token bridge that can move funds between L1 <> L2.\n// The bridge has a corresponding Portal contract on L1 that it is attached to\n// And corresponds to a Token on L2 that uses the `AuthWit` accounts pattern.\n// Bridge has to be set as a minter on the token before it can be used\ncontract Counter {\n    use dep::aztec::prelude::{AztecAddress, Map, FunctionSelector, EthAddress, PublicMutable, SharedImmutable};\n    use dep::value_note::{balance_utils, value_note::{ValueNote, VALUE_NOTE_LEN}};\n    use dep::easy_private_state::EasyPrivateUint;\n    use dep::token_portal_content_hash_lib::{get_mint_public_content_hash, get_mint_private_content_hash, get_withdraw_content_hash};\n    use dep::token::Token;\n    \n    #[aztec(storage)]\n    struct Storage {\n        counters: Map<AztecAddress, EasyPrivateUint>,\n        token: PublicMutable<AztecAddress>,\n        portal_address: SharedImmutable<EthAddress>,\n    }\n\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn initialize(headstart: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let counters = storage.counters;\n        counters.at(owner).add(headstart, owner, outgoing_viewer);\n    }\n\n     // Constructs the contract.\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(token: AztecAddress, portal_address: EthAddress) {\n        storage.token.write(token);\n        storage.portal_address.initialize(portal_address);\n    }\n\n    #[aztec(private)]\n    fn increment(owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        dep::aztec::oracle::debug_log::debug_log_format(\"Incrementing counter for owner {0}\", [owner.to_field()]);\n        let counters = storage.counters;\n        counters.at(owner).add(1, owner, outgoing_viewer);\n    }\n\n    unconstrained fn get_counter(owner: AztecAddress) -> pub Field {\n        let counters = storage.counters;\n        balance_utils::get_balance(counters.at(owner).set)\n    }\n\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount publicly\n    #[aztec(public)]\n    fn claim_public(to: AztecAddress, amount: Field, secret: Field, message_leaf_index: Field) {\n        let content_hash = get_mint_public_content_hash(to, amount);\n\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret,\n            storage.portal_address.read_public(),\n            message_leaf_index\n        );\n\n        // Mint tokens\n        Token::at(storage.token.read()).mint_public(to, amount).call(&mut context);\n    }\n\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount in private assets\n    // User needs to call token.redeem_shield() to get the private assets\n    #[aztec(private)]\n    fn claim_private(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field // secret used to consume the L1 to L2 message\n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount);\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret_for_L1_to_L2_message_consumption,\n            storage.portal_address.read_private()\n        );\n\n        // Mint tokens on L2\n        // `mint_private` on token is public. So we call an internal public function\n        // which then calls the public method on the token contract.\n        // Since the secret_hash is passed, no secret is leaked.\n        Counter::at(context.this_address())._call_mint_on_token(amount, secret_hash_for_redeeming_minted_notes).enqueue(&mut context);\n    }\n\n    // This is a public call as we need to read from public storage.\n    // Also, note that user hashes their secret in private and only sends the hash in public\n    // meaning only user can `redeem_shield` at a later time with their secret.\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _call_mint_on_token(amount: Field, secret_hash: Field) {\n        Token::at(storage.token.read()).mint_private(amount, secret_hash).call(&mut context);\n    }\n\n}","path":"/home/lima.linux/aztec/aztec-starter/contracts/counter/src/main.nr"},"82":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"83":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"84":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32, let M: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the \n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the \n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from \n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"86":{"source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N, M> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32, let M: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32, let M: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<Note, let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"101":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_data_tree_index\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"103":{"source":"use crate::keys::public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH};\nuse dep::protocol_types::traits::{Serialize, Deserialize};\n\n// This struct represents how public keys are stored in the key registry. We store not just the keys themselves but also\n// their hash, so that when reading in private we can perform a historical read for the hash and then show that it\n// corresponds to a preimage obtained from an unconstrained hint. We do store the keys keys regardless as they might be\n// needed during public execution, and since we need to broadcast and produce hints in some standardized way.\n// While it might seem odd to create a struct for what is effectively some data and a pure function called on it, state\n// variables rely on serializable structs in order to persist data to storage, so we must use this abstraction.\nstruct StoredKeys {\n    public_keys: PublicKeys,\n    hash: Field,\n}\n\nimpl StoredKeys {\n    // Instances of StoredKeys are expected to only be created by calling this function so that we guarantee that the\n    // hash field does indeed correspond to the hash of the keys. Ideally we'd forbid direct access to the struct, but \n    // Noir doesn't yet support private members.\n    fn new(public_keys: PublicKeys) -> Self {\n        Self { public_keys, hash: public_keys.hash().inner }\n    }\n}\n\n// Our serialization is the concatenation of the public keys serialization plush the hash, so we need one extra field.\nglobal STORED_KEYS_LENGTH: u32 =  PUBLIC_KEYS_LENGTH + 1;\n\nimpl Serialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn serialize(self) -> [Field; STORED_KEYS_LENGTH] {\n        // The code below is equivalent to:\n        // [ ...self.public_keys.serialize(), self.hash ]\n\n        let mut array = [0; STORED_KEYS_LENGTH];\n\n        let serialized_keys = self.public_keys.serialize();\n        for i in 0..serialized_keys.len() {\n            array[i] = serialized_keys[i];\n        }\n\n        array[PUBLIC_KEYS_LENGTH] = self.hash;\n\n        array\n    }\n}\n\nimpl Deserialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn deserialize(array: [Field; STORED_KEYS_LENGTH]) -> Self {\n        // The code below is equivalent to:\n        // Self { public_keys: PublicKeys::deserialize(array[0 : PUBLIC_KEYS_LENGTH]), hash: array[PUBLIC_KEYS_LENGTH] }\n\n        let mut serialized_keys = [0; PUBLIC_KEYS_LENGTH];\n        for i in 0..serialized_keys.len() {\n            serialized_keys[i] = array[i];\n        }\n\n        let hash = array[PUBLIC_KEYS_LENGTH];\n\n        Self { public_keys: PublicKeys::deserialize(serialized_keys), hash }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/keys/stored_keys.nr"},"104":{"source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr"},"107":{"source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\nuse crate::keys::constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\nstruct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\ntrait ToPoint {\n    fn to_point(self) -> Point;\n}\n\nstruct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nstruct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : NpkM { inner: Point::empty() },\n            ivpk_m : IvpkM { inner: Point::empty() },\n            ovpk_m : OvpkM { inner: Point::empty() },\n            tpk_m : TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m.inner == other.npk_m.inner ) &\n        ( self.ivpk_m.inner == other.ivpk_m.inner ) &\n        ( self.ovpk_m.inner == other.ovpk_m.inner ) &\n        ( self.tpk_m.inner == other.tpk_m.inner )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x:serialized[0], y:serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x:serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x:serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x:serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr"},"109":{"source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::{PrivateContext, UnconstrainedContext},\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{\n    public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH}, stored_keys::StoredKeys,\n    constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}\n},\n    state_vars::{\n    shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter,\n    public_mutable::PublicMutable, map::Map\n}\n};\n\nmod test;\n\n// This is the number of blocks that must pass after a key rotation event until the old keys are fully phased out and\n// become invalid.\nglobal KEY_REGISTRY_UPDATE_BLOCKS = 5;\n\nglobal KEY_REGISTRY_STORAGE_SLOT = 1;\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// Returns all current public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_current_public_keys(context: &mut PrivateContext, account: AztecAddress) -> PublicKeys {\n    // We're going to perform historical reads from public storage, and so need to constrain the caller so that they\n    // cannot use very old blocks when constructing proofs, and hence e.g. read very old keys. We are lax and allow\n    // _any_ recent block number to be used, regardless of whether there may have been a recent key rotation. This means\n    // that multiple sets of keys are valid for a while immediately after rotation, until the old keys become phased\n    // out. We *must* be lax to prevent denial of service and transaction fingerprinting attacks by accounts that rotate\n    // their keys frequently.\n    // Note that we constrain the max block number even if the registry ends up being empty: this ensures that proof of\n    // an empty registry is also fresh.\n    let current_header = context.get_header();\n    context.set_tx_max_block_number(current_header.global_variables.block_number as u32 + KEY_REGISTRY_UPDATE_BLOCKS);\n\n    get_historical_public_keys(current_header, account)\n}\n\n// Returns historical public keys for a given account at some block determined by a block header. We read all keys at\n// once since the constraints for reading them all are actually fewer than if we read them one at a time - any read keys\n// that are not required by the caller can simply be discarded.\n// WARNING: if called with a historical header created from a fixed block this function will explicitly ignore key\n// rotation! This means that callers of this may force a user to use old keys, potentially leaking privacy (e.g. if the\n// old keys were leaked). Only call this function with a header from a fixed block if you understand the implications of\n// breaking key rotation very well.\npub fn get_historical_public_keys(historical_header: Header, account: AztecAddress) -> PublicKeys {\n    // TODO: improve this so that we always hint the correct set of keys (either registry or canonical) and hash them\n    // once instead of having two different hints and twice as many constraints due to the double hashing.\n\n    // The key registry is the primary source of information for keys, as that's where accounts store their new keys\n    // when they perform rotation. The key registry conveniently stores a hash of each user's keys, so we can read that\n    // single field and then prove that we know its preimage (i.e. the current set of keys).\n    let key_registry_hash = key_registry_hash_public_historical_read(historical_header, account);\n    if key_registry_hash != 0 {\n        let hinted_registry_public_keys = key_registry_get_stored_keys_hint(\n            account,\n            historical_header.global_variables.block_number as u32\n        );\n        assert_eq(hinted_registry_public_keys.hash().to_field(), key_registry_hash);\n\n        hinted_registry_public_keys\n    } else {\n        // If nothing was written to the registry, we may still be able to produce the correct keys if we happen to know\n        // the canonical set (i.e. the ones that are part of the account's preimage).\n        let (hinted_canonical_public_keys, partial_address) = get_public_keys_and_partial_address(account);\n        assert_eq(\n            account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n        );\n\n        hinted_canonical_public_keys\n    }\n}\n\nfn key_registry_hash_public_historical_read(historical_header: Header, account: AztecAddress) -> Field {\n    // The keys are stored in a Map that is keyed with the address of each account, so we first derive the corresponding\n    // slot for this account.\n    let keys_storage_slot = derive_storage_slot_in_map(KEY_REGISTRY_STORAGE_SLOT, account);\n\n    // The keys are stored as [ ...serialized_keys, hash ], and since arrays get allocated sequential storage slots\n    // (prior to siloing!), we simply add the length to the base slot to get the last element.\n    let hash_storage_slot = keys_storage_slot + PUBLIC_KEYS_LENGTH as Field;\n\n    historical_header.public_storage_historical_read(hash_storage_slot, CANONICAL_KEY_REGISTRY_ADDRESS)\n}\n\nunconstrained fn key_registry_get_stored_keys_hint(account: AztecAddress, block_number: u32) -> PublicKeys {\n    // This is equivalent to the key registry contract having an unconstrained getter that we call from an oracle, but\n    // PXE does not yet support that functionality so we do this manually instad. Note that this would be a *historical*\n    // call!\n\n    // TODO (#7524): call the unconstrained KeyRegistry.get_current_keys() function instead\n\n    let context = UnconstrainedContext::at_historical(CANONICAL_KEY_REGISTRY_ADDRESS, block_number);\n    let keys_storage = Map::new(\n        context,\n        KEY_REGISTRY_STORAGE_SLOT,\n        |context, slot| { PublicMutable::new(context, slot) }\n    );\n\n    let stored_keys: StoredKeys = keys_storage.at(account).read();\n    stored_keys.public_keys\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"110":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash,\n    hash::{\n    pedersen_hash, compute_siloed_nullifier, sha256_to_field, pedersen_commitment,\n    poseidon2_hash_with_separator\n}\n};\n// Note: pedersen_commitment is used only as a re-export here\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        poseidon2_hash_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x1cce4dbf69f14c44865919991ee1057922e34d7310ba237d71759aa422621ca9);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"119":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"128":{"source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32, let M: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N, M> {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32, let M: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N, M> + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32, let M: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N, M> {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N, M>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"129":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"130":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once. \n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"133":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"135":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"136":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"139":{"source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"141":{"source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"142":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"143":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage,\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, public_data_tree_index: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"145":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle<let N: u32>(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note<let N: u32>(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let NB: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"146":{"source":"use dep::protocol_types::{address::AztecAddress};\n\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: u64 = 17;\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr"},"147":{"source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr"},"148":{"source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained fn get_public_keys_and_partial_address_oracle_wrapper(address: AztecAddress) -> [Field; 13] {\n    get_public_keys_and_partial_address_oracle(address)\n}\n\npub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle_wrapper(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"152":{"source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<let N: u32>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"154":{"source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"158":{"source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_current_public_keys, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL\n};\n\nunconstrained fn compute_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    )\n}\n\nfn compute<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    inner_compute: fn(AztecAddress, Field, Field, OvpkM, IvpkM, AztecAddress, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute_unconstrained);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"159":{"source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\nstruct EncryptedLogIncomingBody<let M: u32> {\n    plaintext: [u8; M]\n}\n\nimpl<let M: u32> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, let N: u32>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, let MR: u32>(\n        event: T,\n        randomness: Field\n    ) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_hiding_point(self) -> Point {\n            crate::generators::Ga1\n        }\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_nullifier(_self: Self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n            1\n        }\n\n        fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes = storage_slot.to_be_bytes(32);\n            let note_type_id_bytes = AddressNote::get_note_type_id().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes = serialized_note[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        /// 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        /// the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        /// implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        /// 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes = randomness.to_be_bytes(32);\n            let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes = serialized_event[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes = serialized_event[i].to_be_bytes(32);\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 185, 29, 14, 152, 216, 130, 219, 151, 80, 185, 43, 223, 167, 8, 89, 189, 88, 188, 101, 137, 255, 136, 84, 252, 79, 18, 52, 3, 110, 54, 54, 206, 244, 209, 246, 226, 207, 247, 143, 253, 211, 75, 160, 224, 172, 41, 45, 7, 208, 137, 90, 56, 59, 4, 234, 48, 53, 23, 130, 230, 49, 249, 142, 243, 170, 72, 183, 242, 49, 124, 46, 52, 198, 75, 55, 102, 56, 89, 254, 67, 59, 157, 249, 120, 184, 67, 154, 16, 148, 227, 93, 37, 120, 199, 93, 166, 80, 127, 173, 52, 80, 135, 87, 1, 168, 164, 51, 48, 126, 120, 47, 102, 211, 227, 234, 170, 208, 99, 111, 198, 170, 226, 156, 244, 241, 174, 206, 30\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr"},"160":{"source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high = self.eph_sk.hi.to_be_bytes(32);\n        let serialized_eph_sk_low = self.eph_sk.lo.to_be_bytes(32);\n\n        let address_bytes = self.recipient.to_field().to_be_bytes(32);\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes(32).as_array();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash_with_separator\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr"},"161":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes(32).as_array();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"162":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let NB: u32, let MB: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        for i in 0..encrypted_note_log_from_typescript.len() {\n            assert_eq(log[i], encrypted_note_log_from_typescript[i]);\n        }\n        assert_eq(encrypted_note_log_from_typescript.len(), log.len());\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"166":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result = pk.x.to_be_bytes(32);\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result.as_array()\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"167":{"source":"use crate::{\n    hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness\n};\n\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::{constants::L1_TO_L2_MSG_TREE_HEIGHT, address::{AztecAddress, EthAddress}, utils::arr_copy_slice};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_message_hash(\n        portal_contract_address,\n        chain_id,\n        storage_contract_address,\n        version,\n        content,\n        secret_hash\n    );\n\n    let returned_message = get_l1_to_l2_membership_witness(storage_contract_address, message_hash, secret);\n    let leaf_index = returned_message[0];\n    let sibling_path = arr_copy_slice(returned_message, [0; L1_TO_L2_MSG_TREE_HEIGHT], 1);\n\n    // Check that the message is in the tree\n    // This is implicitly checking that the values of the message are correct\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert(root == l1_to_l2_root, \"Message not in state\");\n\n    compute_message_nullifier(message_hash, secret, leaf_index)\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/messaging.nr"},"172":{"source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<let N: u32>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N as Field)\n}\n\nunconstrained fn storage_write<let N: u32>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<let N: u32>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<let N: u32>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"173":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, public_call_stack_item::PublicCallStackItem,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"176":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::{raw_storage_read, storage_read}\n};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"181":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"188":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash_with_separator,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"189":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"190":{"source":"use crate::{constants::ETH_ADDRESS_LENGTH, traits::{Empty, ToField, Serialize, Deserialize}, utils};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"191":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, FromField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"192":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"197":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc, point::Point\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"199":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        assert(false, \"depth should be between 0 and 10\");\n        0\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"216":{"source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"233":{"source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x:fields[0], y: fields[1], is_infinite: fields[2] as bool},\n            sk_app: fields[3],\n        }\n    }\n}\n\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"261":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"277":{"source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"279":{"source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"281":{"source":"use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"291":{"source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr"},"292":{"source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"293":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr"},"315":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes = max_value.to_be_bytes(32);\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"317":{"source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"321":{"source":"use dep::aztec::{\n    context::PrivateContext, protocol_types::{address::AztecAddress},\n    note::note_getter_options::NoteGetterOptions, state_vars::PrivateSet,\n    encrypted_logs::encrypted_note_emission::encode_and_encrypt_note_with_keys,\n    keys::getters::get_current_public_keys\n};\nuse dep::value_note::{filter::filter_notes_min_sum, value_note::ValueNote};\n\nstruct EasyPrivateUint<Context> {\n    context: Context,\n    set: PrivateSet<ValueNote, Context>,\n    storage_slot: Field,\n}\n\n// Holds a note that can act similarly to an int.\nimpl<Context> EasyPrivateUint<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = PrivateSet::new(context, storage_slot);\n        EasyPrivateUint { context, set, storage_slot }\n    }\n}\n\nimpl<Context> EasyPrivateUint<&mut PrivateContext> {\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let owner_keys = get_current_public_keys(self.context, owner);\n        let outgoing_viewer_keys = get_current_public_keys(self.context, outgoing_viewer);\n        // Creates new note for the owner.\n        let mut addend_note = ValueNote::new(addend as Field, owner_keys.npk_m.hash());\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(&mut addend_note).emit(\n            encode_and_encrypt_note_with_keys(\n                self.context,\n                outgoing_viewer_keys.ovpk_m,\n                owner_keys.ivpk_m,\n                owner\n            )\n        );\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u64, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let owner_keys = get_current_public_keys(self.context, owner);\n        let outgoing_viewer_keys = get_current_public_keys(self.context, outgoing_viewer);\n\n        // docs:start:pop_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let notes = self.set.pop_notes(options);\n        // docs:end:pop_notes\n\n        let mut minuend: u64 = 0;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n\n                minuend += note.value as u64;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let mut result_note = ValueNote::new(result_value as Field, owner_keys.npk_m.hash());\n        self.set.insert(&mut result_note).emit(\n            encode_and_encrypt_note_with_keys(\n                self.context,\n                outgoing_viewer_keys.ovpk_m,\n                owner_keys.ivpk_m,\n                owner\n            )\n        );\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/easy-private-state/src/easy_private_uint.nr"},"323":{"source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, traits::{Deserialize, Serialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n// VALUE_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal VALUE_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN, VALUE_NOTE_BYTES_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    /// The following method needed to be implemented because the note is passed as an argument to a contract function\n    /// --> the serialize method is called by aztec-nr when computing an arguments hash.\n    /// Note that when the note is about to be encrypted and emitted as a log the to_be_bytes function auto-implemented\n    /// by aztec macros is called instead.\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.npk_m_hash, self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value) &\n        (self.npk_m_hash == other.npk_m_hash) &\n        (self.randomness == other.randomness)\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/value-note/src/value_note.nr"},"324":{"source":"use dep::aztec::{\n    context::UnconstrainedContext, state_vars::PrivateSet,\n    note::{note_getter::view_notes, note_viewer_options::NoteViewerOptions}\n};\nuse crate::value_note::ValueNote;\n\nunconstrained pub fn get_balance(set: PrivateSet<ValueNote, UnconstrainedContext>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\nunconstrained pub fn get_balance_with_offset(set: PrivateSet<ValueNote, UnconstrainedContext>, offset: u32) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let mut options = NoteViewerOptions::new();\n    let notes = set.view_notes(options.set_offset(offset));\n    // docs:end:view_notes\n    for i in 0..options.limit {\n        if i < notes.len() {\n            balance += notes.get_unchecked(i).value;\n        }\n    }\n\n    if (notes.len() == options.limit) {\n        balance += get_balance_with_offset(set, offset + options.limit);\n    }\n\n    balance\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/value-note/src/balance_utils.nr"},"328":{"source":"use dep::aztec::prelude::{AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteGetterOptions, PrivateContext};\n\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app,\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal ECDSA_PUBLIC_KEY_NOTE_LEN: Field = 5;\n// ECDSA_PUBLIC_KEY_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN: Field = 5 * 32 + 64;\n\n// Stores an ECDSA public key composed of two 32-byte elements\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\n#[aztec(note)]\nstruct EcdsaPublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    // We store the npk_m_hash only to get the secret key to compute the nullifier\n    npk_m_hash: Field,\n}\n\nimpl NoteInterface<ECDSA_PUBLIC_KEY_NOTE_LEN, ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN> for EcdsaPublicKeyNote {\n    // Cannot use the automatic serialization since x and y don't fit. Serialize the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = npk_m_hash\n    fn serialize_content(self) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let byte_x: Field = self.x[31 - i] as Field;\n          x = x + (byte_x * mul);\n          let byte_y: Field = self.y[31 - i] as Field;\n          y = y + (byte_y * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n        \n        [x, last_x, y, last_y, self.npk_m_hash]\n    }\n\n    // Cannot use the automatic deserialization for the aforementioned reasons\n    fn deserialize_content(serialized_note: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> EcdsaPublicKeyNote {\n        let mut x: [u8; 32] = [0; 32];\n        let mut y: [u8; 32] = [0; 32];\n\n        let part_x = serialized_note[0].to_be_bytes(32);\n        for i in 0..31 {\n            x[i] = part_x[i + 1];\n        }\n        x[31] = serialized_note[1].to_be_bytes(32)[31];\n\n        let part_y = serialized_note[2].to_be_bytes(32);\n        for i in 0..31 {\n            y[i] = part_y[i + 1];\n        }\n        y[31] = serialized_note[3].to_be_bytes(32)[31];\n\n        EcdsaPublicKeyNote { x, y, npk_m_hash: serialized_note[4], header: NoteHeader::empty() }\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl EcdsaPublicKeyNote {\n    pub fn new(x: [u8; 32], y: [u8; 32], npk_m_hash: Field) -> Self {\n        EcdsaPublicKeyNote { x, y, npk_m_hash, header: NoteHeader::empty() }\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-contracts/contracts/ecdsa_public_key_note/src/lib.nr"},"341":{"source":"use dep::aztec::{\n    generators::{Ga1 as G_amt, Ga2 as G_npk, Ga3 as G_rnd, G_slot},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{\n    constants::GENERATOR_INDEX__NOTE_NULLIFIER, point::{Point, POINT_LENGTH}, scalar::Scalar,\n    hash::poseidon2_hash_with_separator, traits::Serialize\n},\n    note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app\n};\nuse dep::std::{embedded_curve_ops::multi_scalar_mul, hash::from_field_unsafe};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\nglobal TOKEN_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n#[aztec(note)]\nstruct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NoteInterface<TOKEN_NOTE_LEN, TOKEN_NOTE_BYTES_LEN> for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([note_hash_for_nullify, secret],GENERATOR_INDEX__NOTE_NULLIFIER)\n    }\n\n    fn compute_note_hiding_point(self) -> Point {\n        // We use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        let amount_scalar = from_field_unsafe(self.amount.to_integer());\n        let npk_m_hash_scalar = from_field_unsafe(self.npk_m_hash);\n        let randomness_scalar = from_field_unsafe(self.randomness);\n        let slot_scalar = from_field_unsafe(self.header.storage_slot);\n        // We compute the note hiding point as:\n        //     `G_amt * amount + G_npk * npk_m_hash + G_rnd * randomness + G_slot * slot`\n        // instead of using pedersen or poseidon2 because it allows us to privately add and subtract from amount\n        // in public by leveraging homomorphism.\n        multi_scalar_mul(\n            [G_amt, G_npk, G_rnd, G_slot],\n            [amount_scalar, npk_m_hash_scalar, randomness_scalar, slot_scalar]\n        )\n    }\n}\n\nimpl TokenNote {\n    // TODO: Merge this func with `compute_note_hiding_point`. I (benesjan) didn't do it in the initial PR to not have\n    // to modify macros and all the related funcs in it.\n    fn to_note_hiding_point(self) -> TokenNoteHidingPoint {\n        TokenNoteHidingPoint::new(self.compute_note_hiding_point())\n    }\n}\n\nstruct TokenNoteHidingPoint {\n  inner: Point\n}\n\nimpl TokenNoteHidingPoint {\n    fn new(point: Point) -> Self {\n        Self { inner: point }\n    }\n\n    fn add_amount(&mut self, amount: U128) {\n        self.inner = multi_scalar_mul([G_amt], [from_field_unsafe(amount.to_integer())]) + self.inner;\n    }\n\n    fn add_npk_m_hash(&mut self, npk_m_hash: Field) {\n        self.inner = multi_scalar_mul([G_npk], [from_field_unsafe(npk_m_hash)]) + self.inner;\n    }\n\n    fn add_randomness(&mut self, randomness: Field) {\n        self.inner = multi_scalar_mul([G_rnd], [from_field_unsafe(randomness)]) + self.inner;\n    }\n\n    fn add_slot(&mut self, slot: Field) {\n        self.inner = multi_scalar_mul([G_slot], [from_field_unsafe(slot)]) + self.inner;\n    }\n\n    fn finalize(self) -> Field {\n        self.inner.x\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TokenNoteHidingPoint {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) &\n        (self.npk_m_hash == other.npk_m_hash) &\n        (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self {\n            amount,\n            npk_m_hash: owner_npk_m_hash,\n            randomness: unsafe_rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr"},"342":{"source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{note_getter_options::PropertySelector, utils::compute_note_hash_for_nullify},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n// TRANSPARENT_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TRANSPARENT_NOTE_BYTES_LEN: Field = 2 * 32 + 64;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[aztec(note)]\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nstruct TransparentNoteProperties {\n    amount: PropertySelector,\n    secret_hash: PropertySelector,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN, TRANSPARENT_NOTE_BYTES_LEN> for TransparentNote {\n\n    // Custom serialization to avoid disclosing the secret field\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    // Custom deserialization since we don't have access to the secret plaintext\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        self.compute_nullifier_without_context()\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit. \n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n    // Custom serialization forces us to manually create the metadata struct and its getter\n    pub fn properties() -> TransparentNoteProperties {\n        TransparentNoteProperties {\n            amount: PropertySelector { index: 0, offset: 0, length: 32 },\n            secret_hash: PropertySelector { index: 1, offset: 0, length: 32 }\n        }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr"},"343":{"source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n\ncontract Token {\n    // Libs\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        context::{PrivateContext, PrivateCallInterface}, hash::compute_secret_hash,\n        prelude::{\n        NoteGetterOptions, Map, PublicMutable, SharedImmutable, PrivateSet, AztecAddress,\n        FunctionSelector, NoteHeader, Point\n    },\n        encrypted_logs::{\n        encrypted_note_emission::{encode_and_encrypt_note_with_keys, encode_and_encrypt_note_with_keys_unconstrained},\n        encrypted_event_emission::{encode_and_encrypt_event, encode_and_encrypt_event_with_keys_unconstrained}\n    },\n        keys::getters::get_current_public_keys\n    };\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{assert_current_call_valid_authwit, assert_current_call_valid_authwit_public, compute_authwit_nullifier};\n    // docs:end:import_authwit\n\n    use crate::types::{\n        transparent_note::TransparentNote,\n        token_note::{TokenNote, TOKEN_NOTE_LEN, TokenNoteHidingPoint}, balances_map::BalancesMap\n    };\n    // docs:end::imports\n\n    // In the first transfer iteration we are computing a lot of additional information (validating inputs, retrieving\n    // keys, etc.), so the gate count is already relatively high. We therefore only read a few notes to keep the happy\n    // case with few constraints.\n    global INITIAL_TRANSFER_CALL_MAX_NOTES = 2;\n    // All the recursive call does is nullify notes, meaning the gate count is low, but it is all constant overhead. We\n    // therefore read more notes than in the base case to increase the efficiency of the overhead, since this results in\n    // an overall small circuit regardless.\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES = 8;\n\n    #[aztec(event)]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[aztec(storage)]\n    struct Storage {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: BalancesMap<TokenNote>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128>,\n        // docs:start:storage_pending_shields\n        pending_shields: PrivateSet<TransparentNote>,\n        // docs:end:storage_pending_shields\n        public_balances: Map<AztecAddress, PublicMutable<U128>>,\n        symbol: SharedImmutable<FieldCompressedString>,\n        name: SharedImmutable<FieldCompressedString>,\n        // docs:start:storage_decimals\n        decimals: SharedImmutable<u8>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[aztec(public)]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_public\n        storage.decimals.read_public()\n        // docs:end:read_decimals_public\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_private\n        storage.decimals.read_private()\n        // docs:end:read_decimals_private\n    }\n\n    // docs:start:admin\n    #[aztec(public)]\n    #[aztec(view)]\n    fn admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[aztec(public)]\n    #[aztec(view)]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[aztec(public)]\n    #[aztec(view)]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[aztec(public)]\n    #[aztec(view)]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[aztec(public)]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_public\n    #[aztec(public)]\n    fn mint_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_public\n\n    // docs:start:mint_private\n    #[aztec(public)]\n    fn mint_private(amount: Field, secret_hash: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount, secret_hash);\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n\n        storage.total_supply.write(supply);\n        // docs:start:insert_from_public\n        pending_shields.insert_from_public(&mut note);\n        // docs:end:insert_from_public\n    }\n    // docs:end:mint_private\n\n    // TODO: Nuke this - test functions do not belong to token contract!\n    #[aztec(private)]\n    fn privately_mint_private_note(amount: Field) {\n        let caller = context.msg_sender();\n        let caller_keys = get_current_public_keys(&mut context, caller);\n        storage.balances.add(caller, caller_keys.npk_m, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note_with_keys(&mut context, caller_keys.ovpk_m, caller_keys.ivpk_m, caller)\n        );\n\n        Token::at(context.this_address()).assert_minter_and_mint(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn assert_minter_and_mint(minter: AztecAddress, amount: Field) {\n        assert(storage.minters.at(minter).read(), \"caller is not minter\");\n        let supply = storage.total_supply.read() + U128::from_integer(amount);\n        storage.total_supply.write(supply);\n    }\n\n    // docs:start:shield\n    #[aztec(public)]\n    fn shield(from: AztecAddress, amount: Field, secret_hash: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            // The redeem is only spendable once, so we need to ensure that you cannot insert multiple shields from the same message.\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount.to_field(), secret_hash);\n\n        storage.public_balances.at(from).write(from_balance);\n        pending_shields.insert_from_public(&mut note);\n    }\n    // docs:end:shield\n\n    // docs:start:transfer_public\n    #[aztec(public)]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_public\n\n    // docs:start:burn_public\n    #[aztec(public)]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:redeem_shield\n    #[aztec(private)]\n    fn redeem_shield(to: AztecAddress, amount: Field, secret: Field) {\n        let secret_hash = compute_secret_hash(secret);\n\n        // Pop 1 note (set_limit(1)) which has an amount stored in a field with index 0 (select(0, amount)) and\n        // a secret_hash stored in a field with index 1 (select(1, secret_hash)).\n        let mut options = NoteGetterOptions::new();\n        options = options.select(TransparentNote::properties().amount, amount, Option::none()).select(\n            TransparentNote::properties().secret_hash,\n            secret_hash,\n            Option::none()\n        ).set_limit(1);\n\n        let notes = storage.pending_shields.pop_notes(options);\n        assert(notes.len() == 1, \"note not popped\");\n\n        // Add the token note to user's balances set\n        // Note: Using context.msg_sender() as a sender below makes this incompatible with escrows because we send\n        // outgoing logs to that address and to send outgoing logs you need to get a hold of ovsk_m.\n        let from = context.msg_sender();\n        let from_keys = get_current_public_keys(&mut context, from);\n        let to_keys = get_current_public_keys(&mut context, to);\n        storage.balances.add(to, to_keys.npk_m, U128::from_integer(amount)).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, to_keys.ivpk_m, to));\n    }\n    // docs:end:redeem_shield\n\n    // docs:start:unshield\n    #[aztec(private)]\n    fn unshield(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let from_keys = get_current_public_keys(&mut context, from);\n        storage.balances.sub(from, from_keys.npk_m, U128::from_integer(amount)).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from));\n\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:unshield\n\n    // docs:start:transfer\n    #[aztec(private)]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        let from_keys = get_current_public_keys(&mut context, from);\n        let to_keys = get_current_public_keys(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n\n        // We reduce `from`'s balance by amount by recursively removing notes over potentially multiple calls. This\n        // method keeps the gate count for each individual call low - reading too many notes at once could result in\n        // circuits in which proving is not feasible.\n        // Since the sum of the amounts in the notes we nullified was potentially larger than amount, we create a new\n        // note for `from` with the change amount, e.g. if `amount` is 10 and two notes are nullified with amounts 8 and\n        // 5, then the change will be 3 (since 8 + 5 - 10 = 3).\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            from,\n            amount,\n            INITIAL_TRANSFER_CALL_MAX_NOTES\n        );\n\n        storage.balances.add(from, from_keys.npk_m, change).emit(\n            encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from)\n        );\n\n        storage.balances.add(to, to_keys.npk_m, amount).emit(\n            encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_keys.ovpk_m, to_keys.ivpk_m, to)\n        );\n\n        // We don't constrain encryption of the note log in `transfer` (unlike in `transfer_from`) because the transfer\n        // function is only designed to be used in situations where the event is not strictly necessary (e.g. payment to\n        // another person where the payment is considered to be successful when the other party successfully decrypts a\n        // note).\n        Transfer { from, to, amount: amount.to_field() }.emit(\n            encode_and_encrypt_event_with_keys_unconstrained(&mut context, from_keys.ovpk_m, to_keys.ivpk_m, to)\n        );\n    }\n    // docs:end:transfer\n\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: U128,\n        max_notes: u32\n    ) -> U128 {\n        let subtracted = storage.balances.try_sub(account, amount, max_notes);\n\n        // Failing to subtract any amount means that the owner was unable to produce more notes that could be nullified.\n        // We could in some cases fail early inside try_sub if we detected that fewer notes than the maximum were\n        // returned and we were still unable to reach the target amount, but that'd make the code more complicated, and\n        // optimizing for the failure scenario is not as important.\n        assert(subtracted > U128::from_integer(0), \"Balance too low\");\n\n        if subtracted >= amount {\n            // We have achieved our goal of nullifying notes that add up to more than amount, so we return the change\n            subtracted - amount\n        } else {\n            // try_sub failed to nullify enough notes to reach the target amount, so we compute the amount remaining\n            // and try again.\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n\n    // TODO(#7729): apply no_predicates to the contract interface method directly instead of having to use a wrapper\n    // like we do here.\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: U128\n    ) -> PrivateCallInterface<25, U128, (AztecAddress, Field)> {\n        Token::at(context.this_address())._recurse_subtract_balance(account, remaining.to_field())\n    }\n\n    // TODO(#7728): even though the amount should be a U128, we can't have that type in a contract interface due to\n    // serialization issues.\n    #[aztec(internal)]\n    #[aztec(private)]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: Field) -> U128 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            U128::from_integer(amount),\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES\n        )\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[aztec(private)]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_from\n    #[aztec(private)]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        let from_keys = get_current_public_keys(&mut context, from);\n        let to_keys = get_current_public_keys(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.sub(from, from_keys.npk_m, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.add(to, to_keys.npk_m, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, to_keys.ivpk_m, to));\n    }\n    // docs:end:transfer_from\n\n    // docs:start:burn\n    #[aztec(private)]\n    fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let from_keys = get_current_public_keys(&mut context, from);\n        storage.balances.sub(from, from_keys.npk_m, U128::from_integer(amount)).emit(encode_and_encrypt_note_with_keys(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from));\n\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn\n\n    /// We need to use different randomness for the user and for the fee payer notes because if the randomness values\n    /// were the same we could fingerprint the user by doing the following:\n    ///      1) randomness_influence = fee_payer_point - G_npk * fee_payer_npk =\n    ///                              = (G_npk * fee_payer_npk + G_rnd * randomness) - G_npk * fee_payer_npk =\n    ///                              = G_rnd * randomness\n    ///      2) user_fingerprint = user_point - randomness_influence =\n    ///                          = (G_npk * user_npk + G_rnd * randomness) - G_rnd * randomness =\n    ///                          = G_npk * user_npk\n    ///      3) Then the second time the user would use this fee paying contract we would recover the same fingerprint\n    ///         and link that the 2 transactions were made by the same user. Given that it's expected that only\n    ///         a limited set of fee paying contracts will be used and they will be known, searching for fingerprints\n    ///         by trying different fee payer npk values of these known contracts is a feasible attack.\n    ///\n    /// `fee_payer_point` and `user_point` above are public information because they are passed as args to the public\n    /// `complete_refund(...)` function.\n    #[aztec(private)]\n    fn setup_refund(\n        fee_payer: AztecAddress, // Address of the entity which will receive the fee note.\n        user: AztecAddress, // A user for which we are setting up the fee refund.\n        funded_amount: Field, // The amount the user funded the fee payer with (represents fee limit).\n        user_randomness: Field, // A randomness to mix in with the generated refund note for the sponsored user.\n        fee_payer_randomness: Field // A randomness to mix in with the generated fee note for the fee payer.\n    ) {\n        // 1. This function is called by fee paying contract (fee_payer) when setting up a refund so we need to support\n        // the authwit flow here and check that the user really permitted fee_payer to set up a refund on their behalf.\n        assert_current_call_valid_authwit(&mut context, user);\n\n        // 2. Get all the relevant keys\n        let fee_payer_npk_m_hash = get_current_public_keys(&mut context, fee_payer).npk_m.hash();\n        let user_keys = get_current_public_keys(&mut context, user);\n        let user_npk_m_hash = user_keys.npk_m.hash();\n\n        // 3. Deduct the funded amount from the user's balance - this is a maximum fee a user is willing to pay\n        // (called fee limit in aztec spec). The difference between fee limit and the actual tx fee will be refunded \n        // to the user in the `complete_refund(...)` function.\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            user,\n            U128::from_integer(funded_amount),\n            INITIAL_TRANSFER_CALL_MAX_NOTES\n        );\n        storage.balances.add(user, user_keys.npk_m, change).emit(\n            encode_and_encrypt_note_with_keys_unconstrained(&mut context, user_keys.ovpk_m, user_keys.ivpk_m, user)\n        );\n\n        // 4. We create the partial notes for the fee payer and the user.\n        // --> Called \"partial\" because they don't have the amount set yet (that will be done in `complete_refund(...)`).\n        let fee_payer_partial_note = TokenNote {\n            header: NoteHeader {\n                contract_address: AztecAddress::zero(),\n                nonce: 0,\n                storage_slot: storage.balances.map.at(fee_payer).storage_slot,\n                note_hash_counter: 0\n            },\n            amount: U128::zero(),\n            npk_m_hash: fee_payer_npk_m_hash,\n            randomness: fee_payer_randomness\n        };\n        let user_partial_note = TokenNote {\n            header: NoteHeader {\n                contract_address: AztecAddress::zero(),\n                nonce: 0,\n                storage_slot: storage.balances.map.at(user).storage_slot,\n                note_hash_counter: 0\n            },\n            amount: U128::zero(),\n            npk_m_hash: user_npk_m_hash,\n            randomness: user_randomness\n        };\n\n        // 5. Now we get the note hiding points.\n        let mut fee_payer_point = fee_payer_partial_note.to_note_hiding_point();\n        let mut user_point = user_partial_note.to_note_hiding_point();\n\n        // 6. Set the public teardown function to `complete_refund(...)`. Public teardown is the only time when a public\n        // function has access to the final transaction fee, which is needed to compute the actual refund amount.\n        context.set_public_teardown_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"complete_refund(((Field,Field,bool)),((Field,Field,bool)),Field)\"),\n            [\n            fee_payer_point.inner.x, fee_payer_point.inner.y, fee_payer_point.inner.is_infinite as Field, user_point.inner.x, user_point.inner.y, user_point.inner.is_infinite as Field, funded_amount\n        ]\n        );\n    }\n\n    // TODO(#7728): even though the funded_amount should be a U128, we can't have that type in a contract interface due\n    // to serialization issues.\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn complete_refund(\n        // TODO(#7771): the following makes macros crash --> try getting it work once we migrate to metaprogramming\n        // mut fee_payer_point: TokenNoteHidingPoint,\n        // mut user_point: TokenNoteHidingPoint,\n        fee_payer_point_immutable: TokenNoteHidingPoint,\n        user_point_immutable: TokenNoteHidingPoint,\n        funded_amount: Field\n    ) {\n        // TODO(#7771): nuke the following 2 lines once we have mutable args\n        let mut fee_payer_point = fee_payer_point_immutable;\n        let mut user_point = user_point_immutable;\n\n        // TODO(#7728): Remove the next line\n        let funded_amount = U128::from_integer(funded_amount);\n        let tx_fee = U128::from_integer(context.transaction_fee());\n\n        // 1. We check that user funded the fee payer contract with at least the transaction fee.\n        // TODO(#7796): we should try to prevent reverts here\n        assert(funded_amount >= tx_fee, \"funded amount not enough to cover tx fee\");\n\n        // 2. We compute the refund amount as the difference between funded amount and tx fee.\n        let refund_amount = funded_amount - tx_fee;\n\n        // 3. We add fee to the fee payer point and refund amount to the user point.\n        fee_payer_point.add_amount(tx_fee);\n        user_point.add_amount(refund_amount);\n\n        // 4. We finalize the hiding points to get the note hashes.\n        let fee_payer_note_hash = fee_payer_point.finalize();\n        let user_note_hash = user_point.finalize();\n\n        // 5. At last we emit the note hashes.\n        context.push_note_hash(fee_payer_note_hash);\n        context.push_note_hash(user_note_hash);\n        // --> Once the tx is settled user and fee recipient can add the notes to their pixies.\n    }\n\n    /// Internal ///\n\n    // docs:start:increase_public_balance\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n    // docs:end:increase_public_balance\n\n    // docs:start:reduce_total_supply\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n\n    // docs:start:balance_of_private\n    unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.balance_of(owner).to_field()\n    }\n    // docs:end:balance_of_private\n}\n\n// docs:end:token_all\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-contracts/contracts/token_contract/src/main.nr"},"348":{"source":"// docs:start:mint_public_content_hash_nr\nuse dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner: AztecAddress, amount: Field) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes = owner.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0x3e87b9be keccak256('mint_public(bytes32,uint256)')\n    hash_bytes[0] = 0x3e;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xb9;\n    hash_bytes[3] = 0xbe;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field\n) -> Field {\n    let mut hash_bytes = [0; 68];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0xefa012c1 keccak256('mint_private(bytes32,uint256)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xa0;\n    hash_bytes[2] = 0x12;\n    hash_bytes[3] = 0xc1;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: EthAddress, amount: Field, caller_on_l1: EthAddress) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let caller_on_l1_bytes = caller_on_l1.to_field().to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = caller_on_l1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n","path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-contracts/contracts/token_portal_content_hash_lib/src/lib.nr"}}}