{"transpiled":true,"noir_version":"0.33.0+61d6f251ea67204af2d17175f120e17f2e9e9156","name":"SchnorrAccount","functions":[{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(noinitcheck)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"},"visibility":"private"},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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ts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Yts9Zts9Zts9Zts9Zts8vVCo7y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/Y5y/YFy/YFy/YFy/YFy/bFhUrlYNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+YNm+ZNm+ZNm+ZNm+ZNm+vFCpnCzblyzb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+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGA+cGE+cGE+cGE+cGE+cG8WPmcMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD+YMD9YMD9YMD9YMD9YMD9YFyufC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHC+YHG+YHG+YHG+YHG+YH+2Llc8P8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP8YMP84MD84MD84MD84MD84FysfB6YHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyYHxyWH9SL5QdPPah8PvWg8vnUg8rnUw8qn089qHw+9aDy+dSDyudTDyqfTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPLJ9ZfvDUA8tnlh889cDymeUHTz2wfGb5wVMPK58F5gcF5gcF5gcF5gflYuWzwPygwPygwPygwPygwPygPNwP9o8Xz2U/1/P+xS8fr9RrHefq/kf58lfN6luzHW+vjj96lUW96qJebVGvvqjXWNRrLuq1FvXai3qdPb3qorlJyXPTy8rRfHt1i93oVe3MC291i+ufXv/3fsmz0+/olzw//Y5+fVm/5Dnqd/RLnqV+R78Pv3OxH28XIe/uFB5vzm/UM6x6YOZcYOZcYOZcHm/Ob/z7cVg9AasnYfXA8tlg+WywfH68Ob9RDyyfH23O9UxVr19ZLW/MV/HTD7PR2u/npUcb9bvX71+8/vji9cPeXxz2/uKw95dHm/l/8t/bxFvappS8//f2aGN/9/rli9d/j/e7S97+Es8b9Xe//cQ/0r/+ytrydtXb8dNtwssffPdqv+b1S7v8lG1dH7x49Ho99FGN//hFxV2WDzwP8hykPw/yPgcZz4O8z0Hm8yDvc5D1PMj7HGR/8anji0+t+cWn1vziU2uyb2lu18++pbldv7Nu7WCbUwS2OUVgm1MEtjlFYJtTBLY5RWCbUwS2OUVgm1MEtjlFYJtTBLY5RWCbUwS2OUVgm1MEtjlFYJtTBLY5RWCbUwS2OUVgm1MEtjlFYJtTBLY5RWCbUwS2OUVgm1MEtjlFYJtTBLY5RWCbUwS2OUVgm1MEtjlFYJtTFLY5RWGbUxS2OUWv76So0l4/QWz96bURf/Tqi3r9TnrqVq/fSU7d6pWs0O/dK1mh37tX2Pu4wN7HBfY+LrD3cWH9nKUP3/hyqx7Wz1kqrJ+zVFg/Z6mwfs5SgeWzwvJZYfmssHxWWD4rLJ8Vls8Ky2eF5bPC8llh+QzblqCwbQkK25agBstng+WzwfLZYPlssHw2WD4bLJ8dls+wbQnqsHx2WD47LJ8dls8Oy2eH5bPD8tlh+RywfA5YPgcsnwOWzwHL54Dlc8DyOWD5HLB8Dlg+JyyfE5bPCcvnhOUzzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkqzJkazJkazJkazJnaxcrn85fB6mHls12sfLaLlc92sfLZYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYH7QYX7QYX7QYX7QYX7QL1Y+O8wPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPOswPBswPBswPBswPBswPxsXK54D5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wYD5wXi4H+wfL57Lfq7n/Yv1yqzXOq78qXz5q2b1rdmOt1fHH736ol5jUa+5qNda1Gsv6vXB7+MvP9m9fuWoG7229uubSNtcf+r0b9U/WqXeuXr50tXrl67evnT1/qWrjy9dfX7p6utLV99fuvov/V7bX/q9tr/0e21/6ffa/tLvtY+W0Xeu/ku/1/aXfq/tL/1eew/RXVe9/eyp8+vq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wPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwPxgwvxgwvxgwvxgwvxgXqx8TpgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfTJgfLJgfLJgfLJgfLJgfrIuVzwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgwXzgw3zgw3zgw3zgw3zg32x8rlhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfrBhfnBgfnBgfnBgfnBgfnAuVj4PzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8OzA8Oyw/6xfKDpx5UPp96UPl86kHl86kHlc+nHlQ+n3pQ+XzqQeXzqQeVz6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCpB5bPLD946oHlM8sPnnpg+czyg6ceWD6z/OCph5XPAvODAvODAvODAvODcrHyWWB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGB+UGF+UGF+UGF+UGF+UC9WPivMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDxrMDxrMDxrMDxrMD56/DFYPK58N5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcN5gcd5gcd5gcd5gcd5gf9YuWzw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/ygw/xgwPxgwPxgwPxgwPxgXKx8DpgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfDJgfTJgfTJgfTJgfTJgfzIuVzwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwnzgwXzgwXzgwXzgwXzg3Wx8rlgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBgfrBhfrBhfrBhfrBhfrAvVj43zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA82zA8OzA8OzA8OzA8OzA/OxcrngfnBgfnBgfnBgfnBgfnBgfnBgfnBgfnBgfnBgfnBgfnBebQf1Mv89StfNT/X89GLM+vt1Tn19nL5uNkqfauk4+3V8UevtajXXtTr7On10V7zU3uVRb3qol5tUa++qNdY1Ct5bjqT3vyY+lrsRq9qIvZWt7j+6fV/75c8O/2Ofsnz0+/olzxD/YZ+jTxH/Y5+ybPU7+j3DvNURr8WlW03fs4u+/F2EfLjxfZHPQarx2H1xKPrqeutnp+Ggbd6ElZPwepp2L+fYdVzDxd+13oEVg8snx2Wzw7LZw9YPQmrB5bP3rB6hlVPXLB6HpzPKvNaj6rlz/V88JXjp8uQaO3383boF6/fvnj9/sXrh72/BOz9JQpWT6P/vZ18f/vSUvLBv7f52vXn9cXrv8f73fV2H5V+6z6q++3G6Hw4/uuvrC1vHxV0/HQb9fIH373ar3n90i4/ZVvXBy8+H+C+Hvr5zC/+9T980XWPBQHPg3w5SHse5H0O0p8HeZ+DjOdB3ucg83mQ9znI+uJTxxefWvOLT631xafWYt/S3K6ffUtzu35j3drdY7vJXeuBfYpasE9RC3ZLX7Bb+oLd0jfslr4FVo/C6oHlc8PyuWH53LB8blg+NyyfG5bPA8vngeXzwPJ5YPk8sHweWD4PLJ8Hls8Dy+dB5XNcFyqfTz2ofD71oPL51IPK51MPKp9PPah8PvWg8vnUg8rnUw8qn089sHwWWD4LLJ8Fls8Cy2eB5bPA8llg+SywfBZYPgssnxWWzwrLZ4Xls8LyWWH5rLB8Vlg+KyyfFZbPCstng+WzwfLZYPlssHw2WD6zFPypB5bPLAV/6oHls8Hy2WH57LB8dlg+OyyfHZbPDstnh+UzS8GfemD5zFLwcbEU/KkHls8By+eA5XPA8jlg+RywfA5YPgcsnwOWzwnL54Tlc8LyOWH5nLB8Tlg+JyyfE5bPCcvnhOVzwfK5YPlcsHxm+cFTDyyfWX7w1APLZ5YfPPXA8pnlB+Ni+cFTDyyfWX7w1APLZ5YfPPXA8pnlB089sHxm+cFTDyyfWX7w1APLZ5YfPPXA8pnlB089sHy+y9PRr3r7K3Ru1JP5Y4NLxduLpeePgopWUNMKGlZBcpcnpN+1IKEVhHoG76kH9QzeU4/D6kE9g/fUg3pG+qkH9Yz0Uw/qGemnHtQz0kNYz0g/9aCekX7qgeUz6xnppx5YPrOekX7qgeWzwPJZYPkssHxWWD4rLJ8Vls8Ky2eF5bPC8llh+aywfFZYPissnw2WzwbLZ4Pls8Hy2WD5bLB8Nlg+GyyfDZbPBstnh+Wzw/LZYfnssHx2WD47LJ8dls8Oy2eH5bPD8jlg+RywfA5YPgcsnwOWzwHL54Dlc8DyOWD5HLB8Tlg+JyyfE5bPCcvnhOVzwvI5YfmcsHxOWD4nLJ8Lls8Fy+eC5XPB8rlg+VywfC5YPhcsnwuWzwXL54blc8PyuWH53LB8blg+NyyfG5bPDcvnhuVzw/J5YPk8sHweWD4PLJ8Hls8Dy+eB5fPA8nlg+TysfNaLlc96sfJZYX5QYX5QL1Y+K8wPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPGswPGswPGswPGswPnr8MVg8rnw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBx3mBx3mBx3mBx3mB/1i5bPD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/GDA/GDA/GDA/GDA/GBcrHwOmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB9MmB9MmB9MmB9MmB/Mi5XPCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODBfODBfODBfODBfODdbHyuWB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGF+sGF+sGF+sGF+sC9WPjfMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDw7MDw7MDw7MDw7MD87FyueB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cFh+cG8WH7w1IPK51MPKp9PPah8PvWg8vnUg8rnUw8qn089qHw+9aDy+dQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1sPJZYH5QYH5QYH5QYH5QLlY+C8wPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPyqP9oF7mr1/5qvm5no9enFlvr86pt5fLx81W6VslHW+vjj96tUW9+qJeY1GvuajXWtQr5338gxdnXq8vzvpRu/T8UT3nXf/fUT3IsP57qhfwfyWnv/nRa4vd+K9E7XzC8Vb3mU7+9Pq/90ueWH5Hv+Sp5Xf068v6JU8vMiM/3uXO7eQH9X+riST77V06Z/7tu3R8q4nkRq+9qNfZ0+ujRfin9kqejf75nyDM3iqJdz9B5Pe6yfl1r9/rJufXvfqiXr/XTc6ve/1eNzm/7vV73eT8utdvNTfd6PVbzU2/7rW+1dx0o9dFc1Mtmptq0dz06M0Yn9rrormpFs1NtWhuqkVzUy2am3rR3NSL5qZeNDf1ornp0RtrPrXXRXNTL5qbetHc1Ivmpl40N82iuWkWzU2zaG6aRXPTozdJfWqvi+amWTQ3zaK5aRbNTbNnbtJrz9yk1565Sa89c5Nee+YmvXxRr3vmJr32zE167Zmb9NozN+m1aG6SRXOTLJqbZNHcJIvmpkdvXvzUXhfNTbJobpJFc5Msmptk0dyki+YmXTQ36aK5SRfNTY/eiPqpvS6am3TR3KSL5iZdNDfpornJFs1NtmhuskVzky2amx69qfhTe100N9miuckWzU22aG6yRXOTL5qbfNHc9M02cf+610Vz0zfbxP3rXhfNTd9sE/eve100N/miuckXzU2xaG5C7wS/d6+L5ib0LvB79+qLel00N32vfeE3el00N32vfeE3el00N32vfeE3el00Ny3aF66L9oXron3humhfuC7aF66L9oXron3humhfuC7aF66L9oXron3humhfuC7aF66L9oXron3humhfuC7aF66L9oXron3humhfuC7aF66L9oXron3humhfuC7aF66L9oXron3humhfuC7aF66L9oXron3humhfuC7aF66L9oXron3humhfuC7aF66L9oXbon3htmhfuC3aF26L9oWfRhb1umduskX7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBbtC/cFu0Lt0X7wm3RvnBftC/cF+0L90X7wn3RvnC/fFGve+YmX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC/dF+8J90b5wX7Qv3BftC49vti+89K2Sft/r95qbft3ro+cmy7ev7KK/7lVi4nr90iklf+r17/XbF6/fyfWnXvNW//mjH9QfX7z+/OL11xevv8n119X+9qVF4lbWZr9lbc68y9rZ0+vD92R/Zq+yqFf0vHDnXtGzxT/b66/n+4fvyf7MXtEzy517Rc83d+4VPQvduddvNTfd6PVbzU2/7lW/1dx0o9dvNTfd6PVbzU03el00Nz18T/Zn9rpobtJFc5Mumpt00dyki+YmWzQ32aK5yRbNTbZobnr4nuzP7HXR3GSL5iZbNDfZornJFs1Nvmhu8kVzky+am3zR3PTwPdmf2euiuckXzU2+aG7yRXOTL5qbYtHcFIvmplg0N8Wiuenhe7I/s9dFc1Msmpti0dwUi+amWDQ35aK5KRfNTblobspFc9PD92R/Zq+L5qZcNDflorkpF81NuWhuqkVzUy2am2rR3FSL5qaH78n+zF4XzU21aG6qRXNTLZqbatHc1Ivmpl40N/WiuakXzU0P35P9mb0umpt60dzUi+amXjQ39aK5aRbNTbNobppFc9Msmpsevif7M3tdNDfNorlpFs1Ns2humj1zU1575qa89sxNyd6Tfede98xNefmiXvfMTcne633nXvfMTfm99oXf6HXR3PS99oXf6HXR3PS99oXf6HXR3LRoX3gu2heei/aF56J94bloX3gu2heei/aF56J94bloX3gu2heei/aF56J94bloX3gu2heei/aF56J94bloX3gu2heei/aF56J94bloX3gu2heei/aF56J94bloX3gu2heei/aF56J94bloX3gu2heei/aF56J94bloX3gu2heei/aF56J94bloX3h+s33hpW8v7/e9fq+56de9Pnpuuuy1er1qbvQ6Na91yLTYjV7VROytbnH90+v/3q8v6zeW9ZvL+q1l/fayfmdXvw/fJf7Z/cqyfnVZv8vmq0fvFpfxHx2U/dzv3+sJWD0Jq6dg9dzh/f0MCa9/RbbdqKfsx49HIT9ebH/UM6x67rEz+q71CKwehdVjsHocVk/A6klYPQWrp1nvF/XwfK7rrfipd+fTF6wegdWjsHoMVg9sfm7Y/NwPzmeVef1+6bmn//n79cFXjp8u26O13/981PXF6+8vXv987frn+uL1CytPHr0782Y9BqsH9n40sPejgd3n3GPfYl5v9aTfum/sfrsRHOlff2VtqdcXd/x02/jyB9+92q95/dLnU/EfX7rrgxePXq+hNqq3PhT/By4y77HM8XmQLwc5z4O8x0HWPdZQPg/y5SDleZD3OUh9HuR9DtKeB3mfg/TnQd7nION5kPc5yHwe5H0OkvVJdV2sT0LqYt9sTbzde6eUvP/+Cvtm63b98sXr1y9ev33x+v2L1x9fvH72J0u362d/snS7fvYnS7frH9Y88OgtkjfrYX3yU8r65KeU9clPPXqr4c16WJ/8lLI++Sl9+G+K/fI3WUobVg/rN8XKWL8pVsb6TbEy1m+KlbF+U6zusT3trvUErJ6E1QO7vzLY/ZXB8tlh+eywfHZYPjssnx+9penWf18Om58dls8Om58dNj87LJ8Dls8Bu98I2P1GwO43ApbPAcvngN1vBCyfA5bPAcvnhOVzwubnhM3PCZuf77FJ4q71wO43EjY/wzZJVMLuNxKWzwXL54Llc8HyuWD5XLB8Llg+FyyfCzY/F2x+LtjvbzTs9zcadr/RsPuNht1vwDZJFGyTRDXsfqNh+dywfG7Y/Dyw+Xlg8/PA5ueBzc/32Kxw13pg8/PA5ueB3W8M7H5jWPncFyuf+2Llc1+sfO6Llc99sebnvljzc1+sfO6LNT/3xZqf+4Lls8DyWVj3Gy2s+40W1v1GCyyfBZbPwrrfaIHls8DyWWD5rLB8Vtj8rLD5WWHz8z384F3rYd1vtMLmZ2Xdb7Sy7jca5gcb5gcb5gcb5gcb5gcb5gcb5gcb5gfbYPOzweZnY/3+Rjvr9zfaYfcbDrvfcNj9BswPNswPtsPuN2B+sGF+sGF+sGF+sAM2Pwdsfg7Y/HwPP3jXemDzc8Dm54DdbwTsfgPmBxvmBxvmBxvmBxvmBxv2JOqGPYm6YX6wEzY/J2x+hvnBhvnBLtj9RsHuNwp2v1GwfC5YPhfsfgPmBxvmBxv2JOqGPYm6YU+ibtiTqBv2JOq+hx+8az2w+42Gzc8Nu99o2P0GzA82zA82zA82zA82zA82zA82zA82zA/2wObngc3P8+Df39DL/PUrXzU/v1989OZS8+PdpeVHrx8/zy7ttZDWn14b8bde57oW9SqLetVFvdqiXn1Rr7Go11zUay3qtRf1yvq91xHW770OzPUOzPUOzPUOzPUOzPUOzPWOsO4dR1j3jgN7LujAngs6sOeCDuy5oAN7LujAngs6sOeCDuy5oANzvQNzvaOwfDZYPhssnw2WzwbLZ4Pls8Hy2WD5DHsu6MCeCzow1zsw1zsw1zsw1zsw1zsw1zsw1zsw1zsOy2eH5bPD8jlg+Qx7LujAngs6sOeCDuy5oAN7LujAngs6MNc7MNc7AcvnhOVzwvI5YfmcsHyGud6Bud5JWD7Dngs6sOeCTsLyuWD5DHO9A3O9A3O9A3O9A3O9A3O9U7B8Llg+w54LOrDngg7suaADey7owJ4LOrDngg7suaADey7owFzvwFzvNCyfB5bPA8vngeXzwPJ5YPk8sHweWD7Dngs6sOeCzqDyua4Llc+nHlQ+n3pQ+XzqQeXzqQeVz6ceVD6felD5fOpB5fOpB5XPpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KkHls8sP3jqgeUzyw+eemD5zPKDpx5YPrP84KmHlc8C84MC84MC84MC84NysfJZYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYH5QYX5QYX5QYX5QYX5QL1Y+K8wPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPKswPGswPGswPGswPGswPnr8MVg8rnw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBw3mBx3mBx3mBx3mBx3mB/1i5bPD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/KDD/GDA/GDA/GDA/GDA/GBcrHwOmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB8MmB9MmB9MmB9MmB9MmB/Mi5XPCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODCfODBfODBfODBfODBfODdbHyuWB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGB+sGF+sGF+sGF+sGF+sC9WPjfMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDzbMDw7MDw7MDw7MDw7MD87FyueB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cGB+cFh+cG+WH7w1IPK51MPKp9PPah8PvWg8vnUg8rnUw8qn089qHw+9aDy+dQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1wPKZ5QdPPbB8ZvnBUw8sn1l+8NQDy2eWHzz1sPJZYH5QYH5QYH5QYH5QLlY+C8wPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPCswPKswPKswPKswPKswP6sXKZ4X5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYX5QYP5QYP5QYP5QYP5wfOXweph5bPB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDB/KDD/KDD/KDD/KDD/KBfrHx2mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB90mB8MmB8MmB8MmB8MmB+Mi5XPAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODAfODCfODCfODCfODCfODebHyOWF+MGF+MGF+MGF+MGF+MGF+MGF+MGF+MGF+MGF+MGF+MGF+MGF+MGF+MGF+MGF+MB/tB/Uyf/3KV83P9Xz04sx6e3VOvb1cPm62St8q6Xh7dfzRqy7q1Rb16ot6jUW95qJea1GvvajX2dPro+3tp/ZKnpvOpDc/pr4Wu9Grmoi91S2uf3r93/slz06/o1/y/PQ7+vVl/ZLnqN/RL3mW+h393mGeyujXorLtxs/ZZT/eLkJ+vNj+qKdh9Qyrnnu48H+unrre6vlpGHirR2D1KKweg/37cVg9AasnYfXA8tlh+eywfI4LVo/A6oHlcxisHofVE7B6HpzPKvNaj6rlz/V88JXjp8uQaO3383bUF6+/v3j987XrT9j7S8LeX1Jh9Rj639vEW9qmlHzw782/eP3xxeu/x/vd9XYfdX6+uVF/99uN0Uj/+itry9tHBR0/3Ua9/MF3r/ZrXr+0y0/Z1vXBi0ev10Mf1fjX//BF1z0WBDwP8uUg+3mQ9znIeR7kXQ7yHrskngf5cpDyPMj7HKR+7amjvvjUeo/tIJ9a/xefWot9S3O7fvYtze36m3VrV8Oqp2GfojbsU9SG3dI37Jb+HttN7loP7Ja+E1ZPweqB5XPD8nlg+TywfB5YPg8snweWzwPL54Hl88DyeWD5PKx8rouVz3Wx8rkuVj7Xxcrnulj5XBcrn+ti5XNdrHyui5XPdcHyWWD5LLB8Flg+CyyfBZbPAstngeWzwPJZYPkssHxWWD4rLJ8Vls8Ky2eF5bPC8llh+aywfFZYPissnw2WzwbLZ4Pls8Hy2WD5bLB8Nlg+GyyfDZbPBstnmIIvmIIvmIIvh+Wzw/LZYfnssHx2WD47LJ8dls8By+eA5TNMwRdMwRdMwRdMwVfA8jlg+RywfA5YPicsnxOWzwnL54Tlc8LyOWH5nLB8Tlg+JyyfE5bPBcvnguVzwfK5YPlcsHwuWD4XLJ8Lls8wP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP1gwP9gwP9jXd3pKUdprIa0/vTbij16/0xOKbvX6nZ5OdKtXX9Trd3oq0a1ev9MTiW71ynpKc1+spzT3xXpKcwvrKc0tAqtHYfUYrB6H1ROwehJWDyyfBZbPAstnheWzwvJZYfmssHxWWD4rLJ8Vls8Ky2eF5bPC8tlg+WywfDZYPhssnw2WzwbLZ4Pls8Hy2WD5bLB8dlg+OyyfHZbPDstnh+Wzw/LZYfnssHx2WD47LJ8Dls8By+eA5XPA8jlg+RywfA5YPgcsnwOWzwHL54Tlc8LyOWH5nLB8Tlg+JyyfE5bPCcvnhOVzwvK5YPlcsHwuWD4XLJ8Lls8Fy+eC5XPB8rlg+VywfG5YPjcsnxuWzw3L54blc8PyuWH53LB8blg+NyyfB5bPA8vngeXzwPJ5YPk8sHweWD4PLJ8Hls/Dyue5WPk8Fyuf52Ll81ysfJ6Llc9zsfJ5LlY+D8wPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDswPDssPzsXyg6ceVD6felD5fOpB5fOpB5XPpx5UPp96UPl86kHl86kHlc+nHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqQeWzyw/eOqB5TPLD556YPnM8oOnHlg+s/zgqYeVzwLzgwLzgwLzgwLzg3Kx8llgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBgflBhflBhflBhflBhflAvVj4rzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8qzA8azA8azA8azA8azA+evwxWDyufDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHDeYHHeYHHeYHHeYHHeYH/WLls8P8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8oMP8YMD8YMD8YMD8YMD8YFysfA6YHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyYHwyY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ikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzikYzik4zik4zik4zik4zin7BktppRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRtFpRjFoRjFoRjFoRjFoRjEuWFIHzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgGzSgmzSgmzSgmzSgmzSjmBUvqpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFpBnFohnFohnFohnFohnFumBJXTSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSjWDSj2DSj2DSj2DSj2DSj2BcsqZtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFJtmFIdmFIdmFIdmFIdmFOeCJfXQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLQjOLAjKJeMKN4CmIl9SmIldSnIFZSn4JYSX0KYiX1KYiV1KcgVlKfglhJfQqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CaEkNM4qnIFpSw4ziKYiW1DCjeAqiJTXMKJ6CYEktNKMoNKMoNKMoNKMoFyyphWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUhWYUlWYUlWYUlWYUlWYU9YIltdKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotKMotGMotGMotGMotGM4vnbaAXBktpoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtFoRtEebRT1Mn/9ylfNzwV99OLMent1Tr29XD7utkrfKul4e3W8Nlubmu1Nzc6iZh9tQj+3WdnUrG5q1jY165uajU3NkieoM/TNjwGwxW40+3IfZW91i+ufXv9Hw+Qp6rc0TJ6kfkvD5GnqdzTs5InqtzRMnqp+S8N3mKwy+rWqbLvxg3fZj3eNkB8vtteCjFaQ0wqKRxdU11tBP40FPwpKWkFFK6hp/4YGVtA97Pl9CxJaQbSkDlpSBy2pI2gFJa0gWlJH0woaWEF50Qp6cFK/PCTn9Sufv/3ngj74yvHTNUm09gczeOpXb8C+egP+1RugvdMk7Z0mi1ZQo//NTbylbkrJR//m5os3UNdXb+Ae73zX221V+q3bqu63+6SR/vVX1pa3jxM6frqrevmD717t17x+aZefIq7rgxePXq+nPqrxr//xa7B7LCF4nuTfTtKeJ3mnk/TnSd7pJON5knc6yXye5J1Osr768PHV59f66vNrf/X5tdk3N/9AA+ybm3+gAYNd5t1jg8p9C6J92tq0T1ubdofftDv8pt3hD+0Of4RWkNIKoiX10JJ6aEk9tKQeWlIPLakHltR+wZLaL1hS+wVLar9gSe0XLKn9giW1X7Ck9guW1H7BktovWlILLamFltRCS2qhJbXQklpoSS20pBZaUgstqYWW1EpLaqUltdKSWmlJrbSkVlpSKy2plZbUSktqpSW10ZLaaElttKQ2WlIbLamNltRGS2qjJbXRktpoSe20pHZaUjstqZ2W1E5Lapq0d5q0d5q0d6cltdOSOmhJHbSkDlpSBy2pg5bUQUvqoCU1Tdo7Tdo7Tdo7Tdp70pI6aUmdtKROWlInLamTltRJS+qkJXXSkrpoSV20pC5aUhctqYuW1EVL6qIlddGSumhJXbSkblpSNy2pm5bUNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKMYNKMYNKMYNKMYNKMYFyypg2YU4/pOz1NKey2k9afXRrw2+52epXSz2e/0HKWbzX6nZyjdala+0/OTbjb7nZ6ddLNZ2DOmQ2DPmI57WNb7FgR7xnRI0goqWkFNK2hgBelFK0hoBdGSWmlJrbSkVlpSKy2plZbUSktqpSW10ZLaaElttKQ2WlIbLamNltRGS2qjJbXRktpoSe20pHZaUjstqZ2W1E5LaqcltdOS2mlJ7bSkdlpSBy2pg5bUQUvqoCV10JI6aEkdtKQOWlIHLamDltRJS+qkJXXSkjppSZ20pE5aUictqZOW1ElL6qQlddGSumhJXbSkLlpSFy2pi5bURUvqoiV10ZK6aEndtKRuWlI3LambltRNS+qmJXXTkrppSd20pG5aUg8tqYeW1ENL6qEl9dCSemhJPbSkHlpSDy2pB5bUecGSOi9YUucFS+q8YEmdFyyp84IldV6wpM4LltR5wZI6L1pSCy2phZbUNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKOYNKNYNKNYNKNYNKNYNKNYFyypi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUi2YUm2YUm2YUm2YUm2YU+4IlddOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOMYtOM4tCM4tCM4tCM4tCM4lywpB6aURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyYUbQLZhRPQaykPgWxkvoUxErqUxArqU9BrKQ+BbGS+hTESupTECupT0G0pIYZxVMQLalhRvEUREtqmFE8BdGSGmYUT0G0pIYZxVMQLalhRvEUREtqmFE8BdGSGmYUT0G0pIYZxVMQLalhRvEUREtqmFE8BdGSGmYUT0G0pIYZxVMQLalhRvEUREtqmFE8BdGSGmYUz19GS2qYUTx/GS2pYUbx/GW0pIYZxfOX0ZIaZhTPX0ZLaphRPAXRkhpmFE9BtKSGGcVTEC2pYUbxFERLaphRPAXRkhpmFE9BtKSGGcVTEC2pYUbxFERLaphRPAXRkhpmFE9BtKSGGcVTEC2pYUbxFERLaphRPAXRkhpmFE9BtKSGGcVTEC2pYUbxFERLaphRPAXRkhpmFE9BtKSGGcVTEC2pYUbxFERLaphRPAXRkhpmFE9BtKSGGcVTEC2pYUbxFERLaphRPAXBklpoRlFoRlFoRlFoRlEuWFILzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgKzSgqzSgqzSgqzSgqzSjqBUtqpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFpRlFoxlFoxlFoxlFoxnF87fRCoIltdGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotGMotOMotOMotOMotOMol+wpHaaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUXSaUQyaUQyaUQyaUQyaUYwLltRBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4pBM4rxaKOol/nrV75qfi7ooxdn1turc+rt5fJxt1X6VknH26vjtVnb1KxvajY2NZubmq1NzXLe0T94ceb1+uKsH8VLz2v5nPf/f0/5ICf77ypfwP+lnAbnR7MtduO/FDURe6tbXP/0+j8aJs8uv6Vh8vzyWxr2bQ2T5xiZkR/vdqL1UQPfajbJfnu7zpl3b9f5rWaTW832pmZn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URyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaURyaUQzNKIZmFEMziqEZxbhhSR2aUQzNKIZmFEMziqEZxdCMYmhGMTSjGJpRDM0ohmYUQzOKoRnF0IxiaEYxNKMYmlEMzSiGZhRDM4qhGcXQjGJoRjE0oxiaUQzNKIZmFEMziqEZxdCMYmhGMTSjGJpRDM0ohmYUQzOKoRnF0IxiaEYxNKMYmlEMzSiGZhRDM4qhGcXQjGJoRjE0oxiaUQzNKIZmFEMziqEZxdCMYmhGMTSjGJpRDM0ohmYUQzOKoRnF0IxiaEYxNKMYmlEMzSiGZhRDM4qhGcXQjGJoRjE0oxiaUQzNKIZmFEMziqEZxdCMYmhGMTSjGJpRDM0ohmYUQzOKoRnF0IxiaEYxNKMYmlEMzSiGZhRDM4qhGcXQjGJoRnFqRnFqRnFqRnFqRnHesKSemlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlGcmlFMzSimZhRTM4qpGcW8YUmdmlFMzSimZhRTM4qpGcXUjGJqRjE1o5iaUUzNKKZmFFMziqkZxdSMYmpGMTWjmJpRTM0opmYUUzOKqRnF1IxiakYxNaOYmlFMzSimZhRTM4qpGcXUjGJqRjE1o5iaUUzNKKZmFFMziqkZxdSMYmpGMTWjmJpRTM0opmYUUzOKqRnF1IxiakYxNaOYmlFMzSimZhRTM4qpGcXUjGJqRjE1o5iaUUzNKKZmFFMziqkZxdSM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pMaM4lUQltRNM4pNM4pNM4pNM4rthiV104xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi04xi14xi14xi14xi14xiv2FJ3TWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2DWj2CWjeP3j3//zD3/84x/+1//445//49/+8oc//+m/Pl16+/Q/b88CalX/9e3WtU7x+nar3mj7yxdfU+UvX/zpw4jTDczTDeTpBup0A+t0A/twA2//1npkA+10A/10A6dHcj89kvvpkdxPj+R+eiT30yO5nx7J4/RIHqdH8jg9ksfpkTxOj+RxeiSP0yN5nB7J4/RIHqdHcvzzI3mM/TJtHVXt9cUt8o1XX4t642X6PG9/++pP9TSsno7VM7B6AqtnYvUkVk9h9Sysnm3VM7F8nlg+TyyfJ5bPE8vnieXzxPJ5Yvk8sXyeWD4nls+J5XNi+ZxYPieWz4nlc2L5nFg+J5bPieVzYflcWD4Xls+F5XNh+VxYPheWz4Xlc2H5XFg+LyyfF5bPC8vnheXzwvJ5Yfm8sHxeWD4vLJ8Xls8by+eN5fPG8nlj+byxfN5YPm8snzeWzxvL543l8z84AvT3LOhsQv/SxANCt/ZLL8a69a+bGOebiPNNzPNN5Pkm6nwT68FN7K+b2MebaLfzTTxgdK/83ER9/bNo/XwT43wTcb6Jeb6JPN/EA8bF2i/KZuy2vmriAfDg3Sb++Tsqcu5fXxy5xtdNxPkm5vkm8nwT7/6+6F/MW37FL+8/lP/WRfuOi95/eP6ti9o9F/V7Lhr3XBT3XDTvuSjvueieO2Lcc0eM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"},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"lookup_validity","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"consumer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"signing_pub_key_x","type":{"kind":"field"},"visibility":"private"},{"name":"signing_pub_key_y","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(noinitcheck)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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d+SrO/LVHfnqjnx1R766a766a766a766a766a766a766a766a766a766a766W766W766W766W766W766W766W766W766W766W766e766e766e766e766e766e766e7668/eqaf5eNc3fq2b5e9Usf6+a5e9Vs/y9ajZYfgjPDxH5IWp+iJYfIl/d+XvVLH+vmuXvVbP8vWqWv1fN8veqWf5eNcvfq2b5e9Usf6+a5e9Vs/y9apa/V83y96pZ/l41y9+rZvl71Sx/r5rl71Wz/L1qlr9XzfL3qln+XjXL36tm+XvVLH8jmeVvJLP8jWSWv5HM8jeSmaHODrKrH+14Jh1npROsdK5+stL0vcoheppOY6XTUelc/TjHM+lc+zDHmPDuEDtNR1jpKCsdY6XjrHSClQ7qvDtz1Hl35qjz7ixQ591ZFFY6wkpHWekYKx1npROsdFiuzDqF1FinkBrrFFKrLFeuLFeuLFeuLFeuLFeuLFeuIFcef5L7lvMf2NnhTUw5OmH04Wtj5z9/e/aK8t1XyHdfod93xfiDPjz/7HWl7o9yk+FwXdE2Xjj++N/3v9++//Hjh8/jJff/+sfdT19uP93tfvzyv9++/svY+P8="}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000aad5fd6b"},{"kind":"string","value":"PublicKeyNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"signing_public_key","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrAccount::verify_private_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrAccount::verify_private_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"signing_pub_key_x","type":{"kind":"field"}},{"name":"signing_pub_key_y","type":{"kind":"field"}}],"kind":"struct","path":"SchnorrAccount::constructor_parameters"}}],"kind":"struct","path":"SchnorrAccount::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"}},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"}}],"kind":"struct","path":"SchnorrAccount::entrypoint_parameters"}}],"kind":"struct","path":"SchnorrAccount::entrypoint_abi"}]}},"file_map":{"102":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_data_tree_index\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"104":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/keys/stored_keys.nr","source":"use crate::keys::public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH};\nuse dep::protocol_types::traits::{Serialize, Deserialize};\n\n// This struct represents how public keys are stored in the key registry. We store not just the keys themselves but also\n// their hash, so that when reading in private we can perform a historical read for the hash and then show that it\n// corresponds to a preimage obtained from an unconstrained hint. We do store the keys keys regardless as they might be\n// needed during public execution, and since we need to broadcast and produce hints in some standardized way.\n// While it might seem odd to create a struct for what is effectively some data and a pure function called on it, state\n// variables rely on serializable structs in order to persist data to storage, so we must use this abstraction.\nstruct StoredKeys {\n    public_keys: PublicKeys,\n    hash: Field,\n}\n\nimpl StoredKeys {\n    // Instances of StoredKeys are expected to only be created by calling this function so that we guarantee that the\n    // hash field does indeed correspond to the hash of the keys. Ideally we'd forbid direct access to the struct, but \n    // Noir doesn't yet support private members.\n    fn new(public_keys: PublicKeys) -> Self {\n        Self { public_keys, hash: public_keys.hash().inner }\n    }\n}\n\n// Our serialization is the concatenation of the public keys serialization plush the hash, so we need one extra field.\nglobal STORED_KEYS_LENGTH: u32 =  PUBLIC_KEYS_LENGTH + 1;\n\nimpl Serialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn serialize(self) -> [Field; STORED_KEYS_LENGTH] {\n        // The code below is equivalent to:\n        // [ ...self.public_keys.serialize(), self.hash ]\n\n        let mut array = [0; STORED_KEYS_LENGTH];\n\n        let serialized_keys = self.public_keys.serialize();\n        for i in 0..serialized_keys.len() {\n            array[i] = serialized_keys[i];\n        }\n\n        array[PUBLIC_KEYS_LENGTH] = self.hash;\n\n        array\n    }\n}\n\nimpl Deserialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn deserialize(array: [Field; STORED_KEYS_LENGTH]) -> Self {\n        // The code below is equivalent to:\n        // Self { public_keys: PublicKeys::deserialize(array[0 : PUBLIC_KEYS_LENGTH]), hash: array[PUBLIC_KEYS_LENGTH] }\n\n        let mut serialized_keys = [0; PUBLIC_KEYS_LENGTH];\n        for i in 0..serialized_keys.len() {\n            serialized_keys[i] = array[i];\n        }\n\n        let hash = array[PUBLIC_KEYS_LENGTH];\n\n        Self { public_keys: PublicKeys::deserialize(serialized_keys), hash }\n    }\n}\n"},"105":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"108":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\nuse crate::keys::constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\nstruct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\ntrait ToPoint {\n    fn to_point(self) -> Point;\n}\n\nstruct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nstruct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : NpkM { inner: Point::empty() },\n            ivpk_m : IvpkM { inner: Point::empty() },\n            ovpk_m : OvpkM { inner: Point::empty() },\n            tpk_m : TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m.inner == other.npk_m.inner ) &\n        ( self.ivpk_m.inner == other.ivpk_m.inner ) &\n        ( self.ovpk_m.inner == other.ovpk_m.inner ) &\n        ( self.tpk_m.inner == other.tpk_m.inner )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x:serialized[0], y:serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x:serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x:serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x:serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"110":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::{PrivateContext, UnconstrainedContext},\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{\n    public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH}, stored_keys::StoredKeys,\n    constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}\n},\n    state_vars::{\n    shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter,\n    public_mutable::PublicMutable, map::Map\n}\n};\n\nmod test;\n\n// This is the number of blocks that must pass after a key rotation event until the old keys are fully phased out and\n// become invalid.\nglobal KEY_REGISTRY_UPDATE_BLOCKS = 5;\n\nglobal KEY_REGISTRY_STORAGE_SLOT = 1;\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// Returns all current public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_current_public_keys(context: &mut PrivateContext, account: AztecAddress) -> PublicKeys {\n    // We're going to perform historical reads from public storage, and so need to constrain the caller so that they\n    // cannot use very old blocks when constructing proofs, and hence e.g. read very old keys. We are lax and allow\n    // _any_ recent block number to be used, regardless of whether there may have been a recent key rotation. This means\n    // that multiple sets of keys are valid for a while immediately after rotation, until the old keys become phased\n    // out. We *must* be lax to prevent denial of service and transaction fingerprinting attacks by accounts that rotate\n    // their keys frequently.\n    // Note that we constrain the max block number even if the registry ends up being empty: this ensures that proof of\n    // an empty registry is also fresh.\n    let current_header = context.get_header();\n    context.set_tx_max_block_number(current_header.global_variables.block_number as u32 + KEY_REGISTRY_UPDATE_BLOCKS);\n\n    get_historical_public_keys(current_header, account)\n}\n\n// Returns historical public keys for a given account at some block determined by a block header. We read all keys at\n// once since the constraints for reading them all are actually fewer than if we read them one at a time - any read keys\n// that are not required by the caller can simply be discarded.\n// WARNING: if called with a historical header created from a fixed block this function will explicitly ignore key\n// rotation! This means that callers of this may force a user to use old keys, potentially leaking privacy (e.g. if the\n// old keys were leaked). Only call this function with a header from a fixed block if you understand the implications of\n// breaking key rotation very well.\npub fn get_historical_public_keys(historical_header: Header, account: AztecAddress) -> PublicKeys {\n    // TODO: improve this so that we always hint the correct set of keys (either registry or canonical) and hash them\n    // once instead of having two different hints and twice as many constraints due to the double hashing.\n\n    // The key registry is the primary source of information for keys, as that's where accounts store their new keys\n    // when they perform rotation. The key registry conveniently stores a hash of each user's keys, so we can read that\n    // single field and then prove that we know its preimage (i.e. the current set of keys).\n    let key_registry_hash = key_registry_hash_public_historical_read(historical_header, account);\n    if key_registry_hash != 0 {\n        let hinted_registry_public_keys = key_registry_get_stored_keys_hint(\n            account,\n            historical_header.global_variables.block_number as u32\n        );\n        assert_eq(hinted_registry_public_keys.hash().to_field(), key_registry_hash);\n\n        hinted_registry_public_keys\n    } else {\n        // If nothing was written to the registry, we may still be able to produce the correct keys if we happen to know\n        // the canonical set (i.e. the ones that are part of the account's preimage).\n        let (hinted_canonical_public_keys, partial_address) = get_public_keys_and_partial_address(account);\n        assert_eq(\n            account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n        );\n\n        hinted_canonical_public_keys\n    }\n}\n\nfn key_registry_hash_public_historical_read(historical_header: Header, account: AztecAddress) -> Field {\n    // The keys are stored in a Map that is keyed with the address of each account, so we first derive the corresponding\n    // slot for this account.\n    let keys_storage_slot = derive_storage_slot_in_map(KEY_REGISTRY_STORAGE_SLOT, account);\n\n    // The keys are stored as [ ...serialized_keys, hash ], and since arrays get allocated sequential storage slots\n    // (prior to siloing!), we simply add the length to the base slot to get the last element.\n    let hash_storage_slot = keys_storage_slot + PUBLIC_KEYS_LENGTH as Field;\n\n    historical_header.public_storage_historical_read(hash_storage_slot, CANONICAL_KEY_REGISTRY_ADDRESS)\n}\n\nunconstrained fn key_registry_get_stored_keys_hint(account: AztecAddress, block_number: u32) -> PublicKeys {\n    // This is equivalent to the key registry contract having an unconstrained getter that we call from an oracle, but\n    // PXE does not yet support that functionality so we do this manually instad. Note that this would be a *historical*\n    // call!\n\n    // TODO (#7524): call the unconstrained KeyRegistry.get_current_keys() function instead\n\n    let context = UnconstrainedContext::at_historical(CANONICAL_KEY_REGISTRY_ADDRESS, block_number);\n    let keys_storage = Map::new(\n        context,\n        KEY_REGISTRY_STORAGE_SLOT,\n        |context, slot| { PublicMutable::new(context, slot) }\n    );\n\n    let stored_keys: StoredKeys = keys_storage.at(account).read();\n    stored_keys.public_keys\n}\n"},"111":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash,\n    hash::{\n    pedersen_hash, compute_siloed_nullifier, sha256_to_field, pedersen_commitment,\n    poseidon2_hash_with_separator\n}\n};\n// Note: pedersen_commitment is used only as a re-export here\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        poseidon2_hash_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x1cce4dbf69f14c44865919991ee1057922e34d7310ba237d71759aa422621ca9);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"118":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<N, M>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N, M>(self) -> Note where Note: NoteInterface<N, M> {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot).0\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    unconstrained pub fn view_note<N, M>(self) -> Note  where Note: NoteInterface<N, M> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"120":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"130":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"134":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"136":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"137":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"138":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<let N: u32>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"139":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"140":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"142":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"143":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"144":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage,\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, public_data_tree_index: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"146":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle<let N: u32>(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note<let N: u32>(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let NB: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"148":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"149":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained fn get_public_keys_and_partial_address_oracle_wrapper(address: AztecAddress) -> [Field; 13] {\n    get_public_keys_and_partial_address_oracle(address)\n}\n\npub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle_wrapper(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"151":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"155":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n"},"159":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_current_public_keys, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL\n};\n\nunconstrained fn compute_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    )\n}\n\nfn compute<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    inner_compute: fn(AztecAddress, Field, Field, OvpkM, IvpkM, AztecAddress, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute_unconstrained);\n    }\n}\n"},"160":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\nstruct EncryptedLogIncomingBody<let M: u32> {\n    plaintext: [u8; M]\n}\n\nimpl<let M: u32> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, let N: u32>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, let MR: u32>(\n        event: T,\n        randomness: Field\n    ) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_hiding_point(self) -> Point {\n            crate::generators::Ga1\n        }\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_nullifier(_self: Self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n            1\n        }\n\n        fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes = storage_slot.to_be_bytes(32);\n            let note_type_id_bytes = AddressNote::get_note_type_id().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes = serialized_note[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        /// 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        /// the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        /// implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        /// 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes = randomness.to_be_bytes(32);\n            let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes = serialized_event[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes = serialized_event[i].to_be_bytes(32);\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 185, 29, 14, 152, 216, 130, 219, 151, 80, 185, 43, 223, 167, 8, 89, 189, 88, 188, 101, 137, 255, 136, 84, 252, 79, 18, 52, 3, 110, 54, 54, 206, 244, 209, 246, 226, 207, 247, 143, 253, 211, 75, 160, 224, 172, 41, 45, 7, 208, 137, 90, 56, 59, 4, 234, 48, 53, 23, 130, 230, 49, 249, 142, 243, 170, 72, 183, 242, 49, 124, 46, 52, 198, 75, 55, 102, 56, 89, 254, 67, 59, 157, 249, 120, 184, 67, 154, 16, 148, 227, 93, 37, 120, 199, 93, 166, 80, 127, 173, 52, 80, 135, 87, 1, 168, 164, 51, 48, 126, 120, 47, 102, 211, 227, 234, 170, 208, 99, 111, 198, 170, 226, 156, 244, 241, 174, 206, 30\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n"},"161":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high = self.eph_sk.hi.to_be_bytes(32);\n        let serialized_eph_sk_low = self.eph_sk.lo.to_be_bytes(32);\n\n        let address_bytes = self.recipient.to_field().to_be_bytes(32);\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes(32).as_array();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash_with_separator\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"162":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes(32).as_array();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"163":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let NB: u32, let MB: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        for i in 0..encrypted_note_log_from_typescript.len() {\n            assert_eq(log[i], encrypted_note_log_from_typescript[i]);\n        }\n        assert_eq(encrypted_note_log_from_typescript.len(), log.len());\n    }\n}\n"},"167":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result = pk.x.to_be_bytes(32);\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result.as_array()\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"174":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, public_call_stack_item::PublicCallStackItem,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"177":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::{raw_storage_read, storage_read}\n};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"189":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash_with_separator,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"190":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"192":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, FromField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"193":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"198":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc, point::Point\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"2":{"path":"std/array.nr","source":"use crate::cmp::Ord;\nuse crate::option::Option;\nuse crate::convert::From;\n\nimpl<T, let N: u32> [T; N] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    pub fn sort(self) -> Self where T: Ord {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        let sorted_index = unsafe {\n            // Safety: These indices are asserted to be the sorted element indices via `find_index`\n            let sorted_index: [u32; N] = self.get_sorting_index(ordering);\n\n            for i in 0..N {\n                let pos = find_index(sorted_index, i);\n                assert(sorted_index[pos] == i);\n            }\n\n            sorted_index\n        };\n\n        // Sort the array using the indexes\n        let mut result = self;\n        for i in 0..N {\n            result[i] = self[sorted_index[i]];\n        }\n        // Ensure the array is sorted\n        for i in 0..N - 1 {\n            assert(ordering(result[i], result[i + 1]));\n        }\n\n        result\n    }\n\n    /// Returns the index of the elements in the array that would sort it, using the provided custom sorting function.\n    unconstrained fn get_sorting_index<Env>(self, ordering: fn[Env](T, T) -> bool) -> [u32; N] {\n        let mut result = [0; N];\n        let mut a = self;\n        for i in 0..N {\n            result[i] = i;\n        }\n        for i in 1..N {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                    let old_j = result[j];\n                    result[j] = result[i];\n                    result[i] = old_j;\n                }\n            }\n        }\n        result\n    }\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Convert a sequence of bytes as-is into a string.\n    /// This function performs no UTF-8 validation or similar.\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\n// helper function used to look up the position of a value in an array of Field\n// Note that function returns 0 if the value is not found\nunconstrained fn find_index<let N: u32>(a: [u32; N], find: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..a.len() {\n        if a[i] == find {\n            result = i;\n        }\n    }\n    result\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"200":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        assert(false, \"depth should be between 0 and 10\");\n        0\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"217":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n"},"22":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n"},"23":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"234":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x:fields[0], y: fields[1], is_infinite: fields[2] as bool},\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"24":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"248":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"27":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\nuse sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\ntrait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"280":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"282":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n"},"292":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"293":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"294":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"316":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes = max_value.to_be_bytes(32);\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"318":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"32":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"5":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Responds with undefined data for `index` where `self.len < index < self.max_len()`.\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Does not check whether the passed `index` is a valid index within the vector.\n    ///\n    /// Silently writes past the end of the vector for `index` where `self.len < index < self.max_len()`\n    /// Panics if the given index points beyond the maximum length of the vector (`self.max_len()`).\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"53":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"64":{"path":"/home/lima.linux/aztec/aztec-starter/contracts/account/src/public_key_note.nr","source":"use dep::aztec::prelude::{AztecAddress, NoteHeader, NoteInterface, PrivateContext};\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app,\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal PUBLIC_KEY_NOTE_LEN: Field = 3;\n// PUBLIC_KEY_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal PUBLIC_KEY_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// Stores a public key composed of two fields\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\n#[aztec(note)]\nstruct PublicKeyNote {\n    x: Field,\n    y: Field,\n    // We store the npk_m_hash only to get the secret key to compute the nullifier\n    npk_m_hash: Field,\n}\n\nimpl NoteInterface<PUBLIC_KEY_NOTE_LEN, PUBLIC_KEY_NOTE_BYTES_LEN> for PublicKeyNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl PublicKeyNote {\n    pub fn new(x: Field, y: Field, npk_m_hash: Field) -> Self {\n        PublicKeyNote { x, y, npk_m_hash, header: NoteHeader::empty() }\n    }\n}"},"65":{"path":"/home/lima.linux/aztec/aztec-starter/contracts/account/src/main.nr","source":"mod public_key_note;\n\n// Account contract that uses Schnorr signatures for authentication.\n// The signing key is stored in an immutable private note and should be different from the encryption/nullifying key.\ncontract SchnorrAccount {\n    use dep::std;\n\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector, NoteHeader, PrivateContext, PrivateImmutable};\n    use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note_with_keys;\n    use dep::authwit::{\n        entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions,\n        auth_witness::get_auth_witness, auth::{compute_authwit_nullifier, compute_authwit_message_hash}\n    };\n    use dep::aztec::{hash::compute_siloed_nullifier, keys::getters::get_current_public_keys};\n    use dep::aztec::oracle::get_nullifier_membership_witness::get_low_nullifier_membership_witness;\n\n    use crate::public_key_note::{PublicKeyNote, PUBLIC_KEY_NOTE_LEN};\n\n    #[aztec(storage)]\n    struct Storage {\n        // docs:start:storage\n        signing_public_key: PrivateImmutable<PublicKeyNote>,\n        // docs:end:storage\n    }\n\n    // Constructs the contract\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(signing_pub_key_x: Field, signing_pub_key_y: Field) {\n        let this = context.this_address();\n        let this_keys = get_current_public_keys(&mut context, this);\n        // Not emitting outgoing for msg_sender here to not have to register keys for the contract through which we\n        // deploy this (typically MultiCallEntrypoint). I think it's ok here as I feel the outgoing here is not that\n        // important.\n\n        // docs:start:initialize\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this_keys.npk_m.hash());\n        storage.signing_public_key.initialize(&mut pub_key_note).emit(encode_and_encrypt_note_with_keys(&mut context, this_keys.ovpk_m, this_keys.ivpk_m, this));\n        // docs:end:initialize\n    }\n\n    // Note: If you globally change the entrypoint signature don't forget to update default_entrypoint.ts file\n    #[aztec(private)]\n    #[aztec(noinitcheck)]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload) {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload);\n    }\n\n    #[aztec(private)]\n    #[aztec(noinitcheck)]\n    #[aztec(view)]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.verify_private_authwit(inner_hash)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\n        // docs:start:entrypoint\n        // Load public key from storage\n        let storage = Storage::init(context);\n        // docs:start:get_note\n        let public_key = storage.signing_public_key.get_note();\n        // docs:end:get_note\n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(outer_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify signature of the payload bytes\n        let verification = std::schnorr::verify_signature_slice(\n            public_key.x,\n            public_key.y,\n            signature,\n            outer_hash.to_be_bytes(32)\n        );\n        assert(verification == true);\n        // docs:end:entrypoint\n        true\n    }\n\n    /**\n    * @notice Helper function to check validity of private authwitnesses\n    * @param consumer The address of the consumer of the message\n    * @param message_hash The message hash of the message to check the validity\n    * @return True if the message_hash can be consumed, false otherwise\n    */\n    unconstrained fn lookup_validity(consumer: AztecAddress, inner_hash: Field) -> pub bool {\n        let public_key = storage.signing_public_key.view_note();\n\n        let message_hash = compute_authwit_message_hash(consumer, context.chain_id(), context.version(), inner_hash);\n\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n        let valid_in_private = std::schnorr::verify_signature_slice(\n            public_key.x,\n            public_key.y,\n            signature,\n            message_hash.to_be_bytes(32)\n        );\n\n        // Compute the nullifier and check if it is spent\n        // This will BLINDLY TRUST the oracle, but the oracle is us, and\n        // it is not as part of execution of the contract, so we are good.\n        let nullifier = compute_authwit_nullifier(context.this_address(), inner_hash);\n        let siloed_nullifier = compute_siloed_nullifier(consumer, nullifier);\n        let lower_wit = get_low_nullifier_membership_witness(context.block_number(), siloed_nullifier);\n        let is_spent = lower_wit.leaf_preimage.nullifier == siloed_nullifier;\n\n        !is_spent & valid_in_private\n    }\n}"},"67":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/authwit/src/auth_witness.nr","source":"#[oracle(getAuthWitness)]\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\n\n/**\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\n * \n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\n * @return The `auth_witness` for the given `message_hash` as Field array.\n */\nunconstrained pub fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n"},"69":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::poseidon2_hash_with_separator\n};\nuse dep::aztec::{prelude::Deserialize, context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties \n * (e.g. protocols or other users) to execute an action on their behalf.\n * \n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be \n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few \n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can \n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be \n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n * \n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer. \n * \n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is \n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n * \n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline \n * how this would look in private, and then in public later. \n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX). \n * `Alice` would make a `deposit` transaction, that she is executing using her account contract. \n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token` \n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to \n * convince the `Token` contract that it is allowed to do so. \n * \n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the \n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to \n * execute that call.\n * \n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her \n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n * \n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n * \n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts. \n * \n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *  \n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store \n * the messages that we have approved. \n * \n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `keccak256(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a colission and we return \n *      a success flag.\n * \n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be \n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the \n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n * \n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains. \n */\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n/** \n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n * \n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the \n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n * \n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/** \n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n * \n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n * \n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize  \n */\npub fn assert_inner_hash_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\"),\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/** \n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n * \n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the \n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n * \n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n * \n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/** \n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n * \n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the \n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n * \n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    let result: Field = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        FunctionSelector::from_signature(\"consume((Field),Field)\"),\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness \n * \n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n * \n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n * \n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n * \n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/** \n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n * \n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n * \n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n * \n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(consumer: AztecAddress, chain_id: Field, version: Field, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n * \n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n * \n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\"),\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n * \n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise \n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        FunctionSelector::from_signature(\"set_reject_all(bool)\"),\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n"},"72":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\n\nuse crate::entrypoint::function_call::{FunctionCall, FUNCTION_CALL_SIZE_IN_BYTES};\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u64 = 21;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u64 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u64 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\nstruct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for AppPayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_slice(self.nonce.to_be_bytes(32));\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n"},"73":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 5 (FUNCTION_CALL_SIZE) + 2\nglobal FEE_PAYLOAD_SIZE: Field = 12;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: Field = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS = 2;\n\n// docs:start:fee-payload-struct\nstruct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n  is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n    for i in 0..MAX_FEE_FUNCTION_CALLS {\n      fields.extend_from_array(self.function_calls[i].serialize());\n    }\n    fields.push(self.nonce);\n    fields.push(self.is_fee_payer as Field);\n    fields.storage\n  }\n}\n\nimpl Hash for FeePayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__FEE_PAYLOAD\n    )\n  }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_slice(self.nonce.to_be_bytes(32));\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n"},"74":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/authwit/src/account.nr","source":"use dep::aztec::{\n    context::PrivateContext, protocol_types::constants::GENERATOR_INDEX__COMBINED_PAYLOAD,\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_authwit_message_hash};\n\nstruct AccountActions<Context> {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n        AccountActions { context, is_valid_impl }\n    }\n}\n\n/**\n * An implementation of the Account Action struct for the private context.\n *\n * Implements logic to verify authorization and execute payloads.\n */\nimpl AccountActions<&mut PrivateContext> {\n\n    /**\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\n     *\n     * Executes the `fee_payload` and `app_payload` in sequence.\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\n     *\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\n     */\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload) {\n        let valid_fn = self.is_valid_impl;\n\n        let combined_payload_hash = poseidon2_hash_with_separator(\n            [app_payload.hash(), fee_payload.hash()],\n            GENERATOR_INDEX__COMBINED_PAYLOAD\n        );\n        assert(valid_fn(self.context, combined_payload_hash));\n\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n        app_payload.execute_calls(self.context);\n    }\n    // docs:end:entrypoint\n\n    /**\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\n     *\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\n     *\n     * Will revert if the message is not authorized.\n     *\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\n     */\n    // docs:start:verify_private_authwit\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can\n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_authwit_message_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        IS_VALID_SELECTOR\n    }\n    // docs:end:verify_private_authwit\n}\n"},"83":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n"},"84":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"85":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32, let M: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the \n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the \n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from \n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"87":{"path":"/home/lima.linux/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.51.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N, M> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32, let M: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32, let M: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<Note, let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"}}}